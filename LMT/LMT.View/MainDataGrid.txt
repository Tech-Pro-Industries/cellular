using BidCfgParser;
using CfgFileOperation.UIShowManger;
using CommonUtility;
using DataBaseUtil;
using DevExpress.Utils;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Core.FilteringUI;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;
using LinkPath;
using LMT.Component.ViewModel;
using LMT.Utils;
using LMT.ViewModel;
using LmtbSnmp;
using MIBDataParser;
using Microsoft.CSharp.RuntimeBinder;
using MsgQueue;
using SCMTResources.CustomControls;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using UILanguageHelper;

namespace LMT.View
{
  public class MainDataGrid : System.Windows.Controls.UserControl, IComponentConnector, IStyleConnector
  {
    public string m_gnbIp;
    public bool IsOnLine = true;
    public string cfgUUID;
    public bool IsCfgFile = true;
    public bool IsUserOperMode = true;
    private bool IsShowConfirmTip = true;
    public bool IsPatchFileMode;
    private DyDataGrid_MIBModel m_ColumnModel;
    private List<DyDataGrid_MIBModel> m_selectItems = new List<DyDataGrid_MIBModel>();
    private bool isMultiAdd;
    private bool isMultiQuery;
    private string strOldValue;
    private string strNewValue;
    private string strMibNameEn;
    private string strMibOid;
    private ObservableCollection<DyDataGrid_MIBModel> dataGridList = new ObservableCollection<DyDataGrid_MIBModel>();
    private bool isEdit;
    private List<CmdMibInfo> listCmdMibInfo;
    private int perPageLineNum = 500;
    private int totalLineNum;
    private int totalPageNum = 1;
    public Dictionary<string, string> oid_cn;
    public Dictionary<string, string> oid_en;
    public MibTableInfo mibTable;
    private int IndexCount;
    public Dictionary<string, Dictionary<string, string>> LineDataList = new Dictionary<string, Dictionary<string, string>>();
    private BasicInfoParaSetWin mutiQueryParaWin;
    internal System.Windows.Controls.TextBox DataGridMibName;
    internal TextBlock DataGridMibEngName;
    internal TextBlock FullMibName;
    internal GridControl DynamicDataGrid;
    internal TableView DynamicTableView;
    internal Popup popEnumList;
    internal System.Windows.Controls.ListBox EnumList;
    internal PagingControl PageInfo;
    internal System.Windows.Controls.Button BtnShowModel;
    internal System.Windows.Controls.Button BtnAllSel;
    internal System.Windows.Controls.Button BtnCancelMutiQuery;
    internal System.Windows.Controls.Button BtnSaveFile;
    internal System.Windows.Controls.Button BtnMakePatchFile;
    private bool _contentLoaded;

    public DyDataGrid_MIBModel ColumnModel
    {
      get => this.m_ColumnModel;
      set
      {
        this.m_ColumnModel = value;
        if (this.m_ColumnModel == null)
          return;
        this.DynamicDataGrid.Columns.Clear();
        if (this.IsUserOperMode)
        {
          foreach (Tuple<string, string, object> property in this.m_ColumnModel.PropertyList)
          {
            if (property != null && property.Item3 is LMT.GridCell)
            {
              LMT.GridCell gridCell = property.Item3 as LMT.GridCell;
              if (gridCell.cellDataType == DataGrid_CellDataType.RegularType || gridCell.cellDataType == DataGrid_CellDataType.OID || gridCell.cellDataType == DataGrid_CellDataType.Array)
              {
                GridColumn gridColumn1 = new GridColumn();
                gridColumn1.Header = (object) property.Item2;
                gridColumn1.ReadOnly = ((LMT.GridCell) property.Item3).m_bIsReadOnly;
                GridColumn gridColumn2 = gridColumn1;
                gridColumn2.Binding = (BindingBase) new System.Windows.Data.Binding(property.Item1 + ".m_Content")
                {
                  Mode = BindingMode.TwoWay
                };
                gridColumn2.BestFitModeOnSourceChange = new BestFitMode?(BestFitMode.Smart);
                gridColumn2.MaxWidth = 1000.0;
                if (gridColumn2.Header.Equals((object) LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc")))
                  gridColumn2.AllowColumnFiltering = DefaultBoolean.False;
                this.DynamicDataGrid.Columns.Add(gridColumn2);
              }
              else if (gridCell.cellDataType == DataGrid_CellDataType.enumType)
              {
                GridColumn gridColumn = new GridColumn();
                gridColumn.Binding = (BindingBase) new System.Windows.Data.Binding(property.Item1 + ".m_Content")
                {
                  Mode = BindingMode.TwoWay
                };
                FrameworkElementFactory frameworkElementFactory = new FrameworkElementFactory(typeof (ComboBoxEdit));
                frameworkElementFactory.SetBinding(LookUpEditBase.ItemsSourceProperty, (BindingBase) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_AllContent"));
                frameworkElementFactory.SetBinding(BaseEdit.EditValueProperty, (BindingBase) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_CurrentValue"));
                frameworkElementFactory.SetValue(LookUpEditBase.ValueMemberProperty, (object) "Key");
                frameworkElementFactory.SetValue(LookUpEditBase.DisplayMemberProperty, (object) "Value");
                frameworkElementFactory.SetValue(ButtonEdit.IsTextEditableProperty, (object) false);
                frameworkElementFactory.SetValue(System.Windows.Controls.Control.BorderBrushProperty, (object) Brushes.Transparent);
                frameworkElementFactory.SetValue(BaseEdit.ShowErrorProperty, (object) false);
                frameworkElementFactory.SetValue(BaseEdit.ShowErrorToolTipProperty, (object) false);
                DataTemplate dataTemplate1 = new DataTemplate();
                dataTemplate1.VisualTree = frameworkElementFactory;
                DataTemplate dataTemplate2 = dataTemplate1;
                gridColumn.Header = (object) property.Item2;
                gridColumn.CellEditTemplate = dataTemplate2;
                gridColumn.AllowSorting = DefaultBoolean.True;
                gridColumn.SortFieldName = property.Item1 + ".m_Content";
                gridColumn.BestFitModeOnSourceChange = new BestFitMode?(BestFitMode.Smart);
                gridColumn.MaxWidth = 1000.0;
                gridColumn.ReadOnly = ((LMT.GridCell) property.Item3).m_bIsReadOnly;
                this.DynamicDataGrid.Columns.Add(gridColumn);
              }
              else if (gridCell.cellDataType == DataGrid_CellDataType.bitType)
              {
                GridColumn gridColumn3 = new GridColumn();
                gridColumn3.Header = (object) property.Item2;
                gridColumn3.ReadOnly = ((LMT.GridCell) property.Item3).m_bIsReadOnly;
                GridColumn gridColumn4 = gridColumn3;
                gridColumn4.Binding = (BindingBase) new System.Windows.Data.Binding(property.Item1 + ".m_Content")
                {
                  Mode = BindingMode.TwoWay
                };
                FrameworkElementFactory frameworkElementFactory = new FrameworkElementFactory(typeof (ComboBoxEdit));
                frameworkElementFactory.SetValue(LookUpEditBase.ItemsSourceProperty, (object) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_AllBit"));
                frameworkElementFactory.SetValue(LookUpEditBase.ValueMemberProperty, (object) "Value");
                frameworkElementFactory.SetValue(LookUpEditBase.DisplayMemberProperty, (object) "Value");
                frameworkElementFactory.SetBinding(BaseEdit.EditValueProperty, (BindingBase) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_Content")
                {
                  Mode = BindingMode.TwoWay,
                  Converter = (IValueConverter) new StringToChecklistConverter()
                });
                frameworkElementFactory.SetValue(ButtonEdit.IsTextEditableProperty, (object) false);
                frameworkElementFactory.SetValue(LookUpEditBase.SeparatorStringProperty, (object) "/");
                Style style = new Style(typeof (ComboBoxEdit));
                style.Setters.Add((SetterBase) new Setter(BaseEdit.StyleSettingsProperty, (object) new CheckedComboBoxStyleSettings()));
                frameworkElementFactory.SetValue(FrameworkElement.StyleProperty, (object) style);
                DataTemplate dataTemplate3 = new DataTemplate();
                dataTemplate3.VisualTree = frameworkElementFactory;
                DataTemplate dataTemplate4 = dataTemplate3;
                gridColumn4.CellEditTemplate = dataTemplate4;
                gridColumn4.BestFitModeOnSourceChange = new BestFitMode?(BestFitMode.Smart);
                gridColumn4.MaxWidth = 1000.0;
                this.DynamicDataGrid.Columns.Add(gridColumn4);
              }
              else if (gridCell.cellDataType == DataGrid_CellDataType.DateTime)
              {
                GridColumn gridColumn5 = new GridColumn();
                gridColumn5.Header = (object) property.Item2;
                gridColumn5.ReadOnly = ((LMT.GridCell) property.Item3).m_bIsReadOnly;
                GridColumn gridColumn6 = gridColumn5;
                gridColumn6.Binding = (BindingBase) new System.Windows.Data.Binding(property.Item1 + ".m_Content")
                {
                  Mode = BindingMode.TwoWay
                };
                gridColumn6.BestFitModeOnSourceChange = new BestFitMode?(BestFitMode.Smart);
                gridColumn6.MaxWidth = 1000.0;
                FrameworkElementFactory frameworkElementFactory = new FrameworkElementFactory(typeof (DateEdit));
                frameworkElementFactory.SetBinding(BaseEdit.EditValueProperty, (BindingBase) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_Content"));
                frameworkElementFactory.SetValue(ButtonEdit.IsTextEditableProperty, (object) false);
                Style style = new Style(typeof (DateEdit));
                style.Setters.Add((SetterBase) new Setter(BaseEdit.StyleSettingsProperty, (object) new DateEditNavigatorWithTimePickerStyleSettings()));
                frameworkElementFactory.SetValue(FrameworkElement.StyleProperty, (object) style);
                frameworkElementFactory.SetValue(TextEdit.MaskProperty, (object) "yyyy-MM-dd HH:mm:ss");
                frameworkElementFactory.SetValue(TextEdit.MaskUseAsDisplayFormatProperty, (object) true);
                DataTemplate dataTemplate5 = new DataTemplate();
                dataTemplate5.VisualTree = frameworkElementFactory;
                DataTemplate dataTemplate6 = dataTemplate5;
                gridColumn6.CellEditTemplate = dataTemplate6;
                this.DynamicDataGrid.Columns.Add(gridColumn6);
              }
            }
          }
        }
        else
        {
          foreach (Tuple<string, string, object> property in this.m_ColumnModel.PropertyList)
          {
            if (property != null)
            {
              GridColumn gridColumn = new GridColumn();
              gridColumn.Header = (object) property.Item2;
              gridColumn.Binding = (BindingBase) new System.Windows.Data.Binding(property.Item1 + ".m_Content")
              {
                Mode = BindingMode.TwoWay
              };
              gridColumn.BestFitModeOnSourceChange = new BestFitMode?(BestFitMode.Smart);
              gridColumn.MaxWidth = 1000.0;
              gridColumn.ReadOnly = ((LMT.GridCell) property.Item3).m_bIsReadOnly;
              if (gridColumn.Header.Equals((object) LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc")))
                gridColumn.AllowColumnFiltering = DefaultBoolean.False;
              this.DynamicDataGrid.Columns.Add(gridColumn);
            }
          }
        }
      }
    }

    public MainDataGrid()
    {
      this.InitializeComponent();
      this.DynamicDataGrid.MouseRightButtonDown += new MouseButtonEventHandler(this.DynamicDataGrid_MouseRightButtonDown);
      this.DynamicTableView.ShowingEditor += new ShowingEditorEventHandler(this.DynamicDataGrid_BeginningEdit);
      this.DynamicTableView.HiddenEditor += new EditorEventHandler(this.DynamicDataGrid_CellEditEnding);
    }

    private void LanguageChange_Deal(SubscribeMsg msg) => System.Windows.Application.Current.Dispatcher?.Invoke((Action) (() => this.RefreshUiContent()));

    private void RefreshUiContent()
    {
      this.DynamicDataGrid.Columns.Clear();
      this.ColumnModel = (DyDataGrid_MIBModel) null;
      if (this.IsUserOperMode)
        this.BtnShowModel.Content = (object) LanguageServices.Current.GetTextValue("BaseInfo_Page_CmpMode");
      else
        this.BtnShowModel.Content = (object) LanguageServices.Current.GetTextValue("BaseInfo_Page_MngMode");
      this.RefreshDataGrid(this.PageInfo.CurrentPage);
    }

    private void DynamicDataGrid_CustomColumnSort(object sender, RoutedEventArgs e)
    {
      if (!this.IsUserOperMode)
        e.Handled = true;
      else if (this.isEdit)
      {
        e.Handled = true;
      }
      else
      {
        if (!(e.Source as GridControl).CurrentColumn.Header.ToString().Equals(LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc")) || this.mibTable == null || this.LineDataList.Count <= 1)
          return;
        this.LineDataList = DataGridUtils.SortMibDataToIndex(this.LineDataList, this.mibTable.indexNum, !DataGridUtils.IsAscend(this.LineDataList, this.mibTable.indexNum));
        this.RefreshDataGridPage(this.PageInfo.CurrentPage);
        e.Handled = true;
      }
    }

    private void DynamicDataGrid_CellEditEnding(object sender, EditorEventArgs e)
    {
      if (!(sender is TableView))
        return;
      DyDataGrid_MIBModel row = (DyDataGrid_MIBModel) e.Row;
      string header = e.Column.Header.ToString();
      if (row == null)
        return;
      this.ModifyCellValueLostFocus(row, header);
      this.isEdit = false;
    }

    private void ModifyCellValueLostFocus(DyDataGrid_MIBModel mibModel, string header)
    {
      try
      {
        if (this.strOldValue == null)
        {
          this.ClearCellEditValue();
        }
        else
        {
          string mibNameEn;
          string cellContent;
          if (!DataGridUtils.GetValueFromCurrentCell(mibModel, header, out this.strNewValue, out mibNameEn, out this.strMibOid, out cellContent, out bool _))
          {
            LogManager.Log.Error(LanguageServices.Current.GetTextValue("BaseInfo_Log_NotGetMibEnName"), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 487, nameof (ModifyCellValueLostFocus));
            this.ClearCellEditValue();
          }
          else
          {
            string key = mibNameEn;
            if (!this.IsUserOperMode && mibModel.Properties.ContainsKey(mibNameEn))
            {
              object property = mibModel.Properties[key];
              if (property is LMT.GridCell)
                mibNameEn = ((LMT.GridCell) property).MibName_EN;
            }
            if (string.IsNullOrEmpty(mibNameEn) || string.IsNullOrEmpty(this.strNewValue) || string.IsNullOrEmpty(cellContent) || string.IsNullOrEmpty(this.strMibOid))
            {
              string textValue = LanguageServices.Current.GetTextValue("BaseInfo_Log_NotGetCellValue");
              LogManager.Log.Error(textValue, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 505, nameof (ModifyCellValueLostFocus));
              ShowLogHelper.Show(textValue, this.m_gnbIp);
              this.UpdateDataGrid(false);
              this.ClearCellEditValue();
            }
            else if (!string.IsNullOrEmpty(this.strOldValue) && this.strNewValue == this.strOldValue)
            {
              this.ClearCellEditValue();
            }
            else
            {
              MibLeafInfo mibNodeInfoByName = SnmpToDatabase.GetMibNodeInfoByName(mibNameEn, this.m_gnbIp);
              if (mibNodeInfoByName == null)
              {
                string textValue = LanguageServices.Current.GetTextValue("CellPlan_Msg_NoMibInfo");
                LogManager.Log.Error(textValue + string.Format("mibname:{0}", (object) mibNameEn), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 524, nameof (ModifyCellValueLostFocus));
                int num = (int) CustomMessageBox.Show(textValue);
                this.ClearCellEditValue();
              }
              else if (!SnmpMibUtil.CheckMibValueByMibLeaf(mibNodeInfoByName, this.strNewValue))
              {
                string str = string.Format("{0}: {1}", (object) mibNodeInfoByName.childNameCh, (object) LanguageServices.Current.GetTextValue("CellPlan_Msg_FormatError"));
                LogManager.Log.Error(str, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 542, nameof (ModifyCellValueLostFocus));
                int num = (int) CustomMessageBox.Show(str);
                this.UpdateDataGrid(false);
              }
              else
              {
                if (this.IsShowConfirmTip)
                {
                  string messageBoxText = string.Format("{0} \"{1}\" {2} {3}?", (object) LanguageServices.Current.GetTextValue("BaseInfo_Log_IsorNotModify"), (object) mibNodeInfoByName.childNameCh, (object) LanguageServices.Current.GetTextValue("BaseInfo_Log_NodeValue"), (object) cellContent);
                  bool flag = false;
                  ref bool local = ref flag;
                  string textValue = LanguageServices.Current.GetTextValue("BaseInfo_Log_NoPormpt");
                  if (CustomMessageBoxResult.Cancel == CustomMessageBox.Show(messageBoxText, ref local, textValue, CustomMessageBoxButton.OKCancel, CustomMessageBoxIcon.Question))
                  {
                    this.UpdateDataGrid(false);
                    return;
                  }
                  this.IsShowConfirmTip = !flag;
                }
                Dictionary<string, object> lineData = new Dictionary<string, object>();
                if (this.IsUserOperMode)
                {
                  if (mibModel.Properties.ContainsKey(mibNameEn) && !lineData.ContainsKey(mibNameEn))
                    lineData.Add(mibNameEn, mibModel.Properties[mibNameEn]);
                }
                else if (mibModel.Properties.ContainsKey(key) && !lineData.ContainsKey(header))
                  lineData.Add(mibNameEn, mibModel.Properties[key]);
                if (!(this.m_ColumnModel?.TableProperty is MibTableInfo tableProperty))
                {
                  LogManager.Log.Error("m_ColumnModel=null or m_ColumnModel.TableProperty is not MibTableInfo type", "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 586, nameof (ModifyCellValueLostFocus));
                }
                else
                {
                  string str = tableProperty.indexNum <= 0 ? ".0" : MibStringHelper.GetIndexValueByGrade(this.strMibOid, tableProperty.indexNum);
                  Dictionary<string, string> dicOidValue = new Dictionary<string, string>();
                  dicOidValue.Add(this.strMibOid, this.strNewValue);
                  if (this.IsOnLine)
                  {
                    Dictionary<string, string> enName2Value = new Dictionary<string, string>();
                    enName2Value.Add(mibNameEn, this.strNewValue);
                    List<CDTLmtbVb> setVbs = new List<CDTLmtbVb>();
                    string strErr;
                    if (!this.FakeNrCellActiveVbs(lineData, enName2Value, ref setVbs, out strErr, UICmdOperatorType.Modify, this.m_gnbIp))
                    {
                      LogManager.Log.Error(strErr, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 613, nameof (ModifyCellValueLostFocus));
                      this.ClearCellEditValue();
                    }
                    else
                    {
                      CDTLmtbPdu lmtPdu = new CDTLmtbPdu();
                      foreach (CDTLmtbVb vb in setVbs)
                      {
                        if (!this.IsBidActiveAndActiveOrDeactiveNrCell(mibNodeInfoByName.childNameMib, str))
                        {
                          if (CDTCmdExecuteMgr.VbSetSync(vb, this.m_gnbIp, ref lmtPdu) != 0)
                          {
                            LogManager.Log.Error(string.Format("CDTCmdExecuteMgr.VbsSetSync() {0}，EnbIp:{1}", (object) LanguageServices.Current.GetTextValue("BaseInfo_Log_CallFail"), (object) this.m_gnbIp), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 636, nameof (ModifyCellValueLostFocus));
                            this.UpdateDataGrid(false);
                            return;
                          }
                          long mLastErrorStatus = lmtPdu.m_LastErrorStatus;
                          if (mLastErrorStatus != 0L)
                          {
                            EnbTypeEnum stationFrameType = CSEnbHelper.GetStationFrameType(this.m_gnbIp);
                            ShowLogHelper.Show(string.Format("{0}：{1},{2}：{3}", (object) LanguageServices.Current.GetTextValue("BaseInfo_Log_ModifyFailErrorCode"), (object) mLastErrorStatus, (object) LanguageServices.Current.GetTextValue("BaseInfo_Log_ErrorDes"), (object) SnmpErrDescHelper.GetErrDescById(mLastErrorStatus, stationFrameType)), this.m_gnbIp);
                            this.UpdateDataGrid(false);
                            return;
                          }
                        }
                        else
                        {
                          Singleton<BidHelper>.GetInstance().MibDataReplaceUpdate(tableProperty.nameMib, mibNodeInfoByName.childNameMib, str, this.strNewValue);
                          Singleton<BidHelper>.GetInstance().MibDataReplaceUpdate(tableProperty.nameMib, "nrCellOperationalState", str, this.strNewValue);
                          Singleton<BidHelper>.GetInstance().WriteMemoryToBidJson();
                        }
                      }
                      this.UpdateDataGrid(true);
                      this.ClearCellEditValue();
                      this.RefreshLineDataList(dicOidValue, str);
                    }
                  }
                  else
                  {
                    string err = "";
                    bool isSucceed = CfgLogicMid.GetInstance().SetTableSingleInstNodeVal(this.cfgUUID, tableProperty.nameMib, str, mibNameEn, this.strNewValue, out err);
                    string showContentIndex1 = DataGridUtils.GetShowContentIndex(mibNodeInfoByName.childOid, this.strOldValue, this.m_gnbIp);
                    string showContentIndex2 = DataGridUtils.GetShowContentIndex(mibNodeInfoByName.childOid, this.strNewValue, this.m_gnbIp);
                    if (isSucceed)
                    {
                      this.CfgFileModifyShowLog(mibNodeInfoByName.childNameCh, mibNameEn, showContentIndex1, showContentIndex2, str);
                      this.RefreshLineDataList(dicOidValue, str);
                    }
                    else
                    {
                      this.CfgFileModifyShowLog(mibNodeInfoByName.childNameCh, mibNameEn, showContentIndex1, showContentIndex2, str, err);
                      ShowLogHelper.Show(err, this.m_gnbIp);
                    }
                    this.UpdateDataGrid(isSucceed);
                    this.ClearCellEditValue();
                  }
                }
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        LogManager.Log.Error(string.Format("MIB Cell Modify error:{0}", (object) ex.Message), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 690, nameof (ModifyCellValueLostFocus));
      }
    }

    private void RefreshLineDataList(Dictionary<string, string> dicOidValue, string strIndex)
    {
      if (dicOidValue == null || dicOidValue.Count == 0 || string.IsNullOrEmpty(strIndex) || !this.LineDataList.ContainsKey(strIndex))
        return;
      foreach (KeyValuePair<string, string> keyValuePair in dicOidValue)
      {
        KeyValuePair<string, string> item = keyValuePair;
        string key = this.LineDataList[strIndex].Keys.ToList<string>().Find((Predicate<string>) (p => p.Equals(item.Key)));
        if (!string.IsNullOrEmpty(key))
          this.LineDataList[strIndex][key] = item.Value;
      }
    }

    private bool IsBidActiveAndActiveOrDeactiveNrCell(string strColMibName, string strIdx) => false;

    private bool FakeNrCellActiveVbs(
      Dictionary<string, object> lineData,
      Dictionary<string, string> enName2Value,
      ref List<CDTLmtbVb> setVbs,
      out string strErr,
      UICmdOperatorType cmdType,
      string strTargetIp)
    {
      if (!DataGridUtils.MakeSnmpVbs(lineData, enName2Value, ref setVbs, out strErr, cmdType, strTargetIp))
        return false;
      if (!Singleton<BidHelper>.Instance.IsActiveBid())
        return true;
      string fromCmdExeResult = CommLinkPath.GetMibValueFromCmdExeResult(".0", "GetNRCellCfgInfo", "nrCellCfgAntStreamType", strTargetIp);
      if (string.IsNullOrEmpty(fromCmdExeResult) || fromCmdExeResult != "15")
      {
        LogManager.Log.Info(string.Format("[FAKE] nrCellCfgAntStreamType value is {0}, return only", (object) fromCmdExeResult), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 772, nameof (FakeNrCellActiveVbs));
        return true;
      }
      if (enName2Value.ContainsKey("nrCellActiveTrigger"))
      {
        if (setVbs.Count == 0)
          return false;
        CDTLmtbVb cdtLmtbVb = setVbs[0];
        for (int index = 1; index < 2; ++index)
        {
          string strNewIndex = string.Format(".{0}", (object) index);
          CDTLmtbVb pVb;
          cdtLmtbVb.Copy(out pVb);
          pVb.Oid = MibStringHelper.ReplaceFullOidIndex(pVb.Oid, 1, strNewIndex);
          setVbs.Add(pVb);
        }
      }
      return true;
    }

    private void UpdateDataGrid(bool isSucceed)
    {
      if (this.dataGridList == null || this.strMibNameEn == null)
        return;
      foreach (DyDataGrid_MIBModel dataGrid in (Collection<DyDataGrid_MIBModel>) this.dataGridList)
      {
        if (dataGrid.Properties.ContainsKey(this.strMibNameEn))
        {
          object property = dataGrid.Properties[this.strMibNameEn];
          if (((LMT.GridCell) property).oid.Equals(this.strMibOid))
          {
            if (typeof (DataGrid_Cell_MIB_ENUM) == property.GetType())
            {
              DataGrid_Cell_MIB_ENUM dataGridCellMibEnum = (DataGrid_Cell_MIB_ENUM) property;
              if (!isSucceed)
              {
                dataGridCellMibEnum.m_CurrentValue = Convert.ToInt32(this.strOldValue);
                if (dataGridCellMibEnum.m_AllContent.ContainsKey(Convert.ToInt32(this.strOldValue)))
                {
                  dataGridCellMibEnum.m_Content = dataGridCellMibEnum.m_AllContent[Convert.ToInt32(this.strOldValue)];
                  break;
                }
                break;
              }
              if (dataGridCellMibEnum.m_AllContent.ContainsKey(Convert.ToInt32(this.strNewValue)))
              {
                dataGridCellMibEnum.m_Content = dataGridCellMibEnum.m_AllContent[Convert.ToInt32(this.strNewValue)];
                break;
              }
              break;
            }
            if (typeof (DataGrid_Cell_MIB_BIT) == property.GetType())
            {
              DataGrid_Cell_MIB_BIT dataGridCellMibBit = (DataGrid_Cell_MIB_BIT) property;
              if (!isSucceed)
              {
                dataGridCellMibBit.m_Content = this.strOldValue;
                break;
              }
              dataGridCellMibBit.m_Content = this.strNewValue;
              break;
            }
            if (typeof (DataGrid_Cell_MIB) == property.GetType())
            {
              DataGrid_Cell_MIB dataGridCellMib = (DataGrid_Cell_MIB) property;
              if (!isSucceed)
              {
                dataGridCellMib.m_Content = this.strOldValue;
                break;
              }
              dataGridCellMib.m_Content = this.strNewValue;
              break;
            }
            break;
          }
        }
      }
      this.ClearCellEditValue();
    }

    private void ClearCellEditValue()
    {
      this.strOldValue = (string) null;
      this.strNewValue = (string) null;
      this.strMibNameEn = (string) null;
      this.strMibOid = (string) null;
    }

    private void DynamicDataGrid_BeginningEdit(object sender, ShowingEditorEventArgs e)
    {
      if (e.Column.ReadOnly && this.IsUserOperMode)
      {
        e.Cancel = true;
      }
      else
      {
        if (!this.IsCfgFile)
          return;
        this.isEdit = true;
        if (e.Column.DataContext == null)
          return;
        object obj1 = (object) (e.Column.DataContext as ObservableCollection<DyDataGrid_MIBModel>)[e.RowHandle];
        if (!(e.Row is DyDataGrid_MIBModel))
          return;
        DyDataGrid_MIBModel row = (DyDataGrid_MIBModel) e.Row;
        string str = e.Column.Header.ToString();
        if (!this.IsUserOperMode && row.Properties.ContainsKey(str))
        {
          object property = row.Properties[str];
          if (property is LMT.GridCell)
          {
            if (((LMT.GridCell) property).m_bIsReadOnly)
            {
              e.Cancel = true;
              return;
            }
          }
          else
          {
            e.Cancel = true;
            return;
          }
        }
        if (row == null)
          return;
        if (!DataGridUtils.GetValueFromCurrentCell(row, str, out this.strOldValue, out this.strMibNameEn, out this.strMibOid, out string _, out bool _))
        {
          this.ClearCellEditValue();
        }
        else
        {
          this.dataGridList = (ObservableCollection<DyDataGrid_MIBModel>) this.DynamicDataGrid.DataContext;
          try
          {
            object obj2 = obj1;
            if (obj2 == null)
              return;
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__31.\u003C\u003Ep__0 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__31.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "JudgePropertyName_StartEditing", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__31.\u003C\u003Ep__0.Target((CallSite) MainDataGrid.\u003C\u003Eo__31.\u003C\u003Ep__0, obj2, e.Column.Header);
          }
          catch (Exception ex)
          {
            LogManager.Log.Error(ex.Message, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 941, nameof (DynamicDataGrid_BeginningEdit));
          }
        }
      }
    }

    private void DynamicDataGrid_MouseMove(object sender, System.Windows.Input.MouseEventArgs e)
    {
      try
      {
        if (!(e.OriginalSource is System.Windows.Controls.DataGridCell originalSource))
          return;
        DyDataGrid_MIBModel dataGridMibModel = new DyDataGrid_MIBModel();
        if (!(e.Source is System.Windows.Controls.DataGrid source))
          return;
        foreach (DataGridCellInfo selectedCell in (IEnumerable<DataGridCellInfo>) source.SelectedCells)
          dataGridMibModel = selectedCell.Item as DyDataGrid_MIBModel;
        if (e.MiddleButton != MouseButtonState.Pressed)
          return;
        int num = (int) DragDrop.DoDragDrop((DependencyObject) originalSource, (object) new DataGridCell_MIB_MouseEventArgs()
        {
          HeaderName = originalSource.Column?.Header.ToString(),
          SelectedCell = dataGridMibModel
        }, System.Windows.DragDropEffects.Copy);
      }
      catch (Exception ex)
      {
      }
    }

    private void DynamicDataGrid_GotMouseCapture(object sender, System.Windows.Input.MouseEventArgs e)
    {
      try
      {
        if (!((e.OriginalSource is System.Windows.Controls.DataGrid originalSource ? originalSource.Items.CurrentItem : (object) null) is DyDataGrid_MIBModel))
          return;
        DyDataGrid_MIBModel dataGridMibModel1 = new DyDataGrid_MIBModel();
        foreach (DataGridCellInfo selectedCell in (IEnumerable<DataGridCellInfo>) originalSource.SelectedCells)
        {
          DyDataGrid_MIBModel dataGridMibModel2 = selectedCell.Item as DyDataGrid_MIBModel;
          if (e.LeftButton == MouseButtonState.Pressed)
          {
            int num = (int) DragDrop.DoDragDrop((DependencyObject) originalSource, (object) new DataGridCell_MIB_MouseEventArgs()
            {
              HeaderName = selectedCell.Column.Header.ToString(),
              SelectedCell = dataGridMibModel2
            }, System.Windows.DragDropEffects.Copy);
          }
        }
      }
      catch (Exception ex)
      {
        LogManager.Log.Error((object) ex, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1023, nameof (DynamicDataGrid_GotMouseCapture));
      }
    }

    private void DynamicDataGrid_MouseRightButtonDown(object sender, MouseButtonEventArgs e)
    {
      if (!this.IsUserOperMode)
        this.ContextMenu = (System.Windows.Controls.ContextMenu) null;
      else if (this.DynamicDataGrid == null || this.m_ColumnModel == null)
      {
        this.ContextMenu = (System.Windows.Controls.ContextMenu) null;
      }
      else
      {
        if (this.DynamicTableView.IsEditing)
          this.DynamicTableView.HideEditor();
        TableViewHitInfo tableViewHitInfo = this.DynamicTableView.CalcHitInfo(e.OriginalSource as DependencyObject);
        if (tableViewHitInfo != null && tableViewHitInfo.IsDataArea)
          this.DynamicDataGrid.SelectedItems.Clear();
        this.m_selectItems.Clear();
        int indexNum = ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum;
        if (indexNum > 0)
        {
          if (this.DynamicDataGrid.SelectedItems != null)
          {
            foreach (DyDataGrid_MIBModel selectedItem in (IEnumerable) this.DynamicDataGrid.SelectedItems)
              this.m_selectItems.Add(selectedItem);
          }
        }
        else if (indexNum == 0)
        {
          ObservableCollection<DyDataGrid_MIBModel> dataContext = (ObservableCollection<DyDataGrid_MIBModel>) this.DynamicDataGrid.DataContext;
          if (dataContext != null && dataContext.Count != 0)
            this.m_selectItems.Add(((Collection<DyDataGrid_MIBModel>) this.DynamicDataGrid.DataContext)[0]);
        }
        if (!(this.m_ColumnModel.TableProperty is MibTableInfo tableProperty))
          return;
        this.listCmdMibInfo?.Clear();
        this.listCmdMibInfo = Database.GetInstance().GetCmdsInfoByEntryName(tableProperty.nameMib, this.m_gnbIp);
        if (this.listCmdMibInfo.Count == 0)
          return;
        if (this.IsOnLine)
        {
          this.OnlineMenuShow(tableProperty);
        }
        else
        {
          if (!this.IsCfgFile)
            return;
          this.OfflineMenuShow(tableProperty);
        }
      }
    }

    private void OnlineMenuShow(MibTableInfo table)
    {
      if (table == null)
        return;
      this.isMultiAdd = false;
      this.isMultiQuery = false;
      string nameCh = table.nameCh;
      System.Windows.Controls.ContextMenu contextMenu = new System.Windows.Controls.ContextMenu();
      System.Windows.Controls.MenuItem newItem1 = this.AddMenuItem(eMenuType.Add);
      System.Windows.Controls.MenuItem newItem2 = this.AddMenuItem(eMenuType.mutiAdd);
      System.Windows.Controls.MenuItem newItem3 = this.AddMenuItem(eMenuType.Modify);
      System.Windows.Controls.MenuItem newItem4 = this.AddMenuItem(eMenuType.Query);
      System.Windows.Controls.MenuItem newItem5 = this.AddMenuItem(eMenuType.mutiQuery);
      System.Windows.Controls.MenuItem newItem6 = this.AddMenuItem(eMenuType.Export);
      System.Windows.Controls.MenuItem newItem7 = this.AddMenuItem(eMenuType.Import);
      if (this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("1"))) != null && this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("1"))).IsMONameShow())
      {
        newItem1.Header = (object) LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Add");
        newItem1.IsEnabled = true;
        contextMenu.Items.Add((object) newItem1);
        newItem2.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_MultiAdd") + " " + nameCh);
        newItem2.IsEnabled = true;
        newItem2.Click += new RoutedEventHandler(this.MenuAddItem_Click);
        contextMenu.Items.Add((object) newItem2);
      }
      if (this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("3") || p.m_cmdType.Equals("4"))) != null)
      {
        newItem3.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Set") + " " + nameCh);
        newItem3.IsEnabled = true;
        contextMenu.Items.Add((object) newItem3);
      }
      if (this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("0"))) != null)
      {
        newItem4.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Srch") + " " + nameCh);
        newItem4.IsEnabled = true;
        contextMenu.Items.Add((object) newItem4);
        if (table.indexNum > 0)
        {
          newItem5.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_MutiSrch") + " " + nameCh);
          newItem5.IsEnabled = true;
          contextMenu.Items.Add((object) newItem5);
        }
      }
      if (this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("1"))) != null)
      {
        newItem7.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Inport") + " " + nameCh);
        newItem7.IsEnabled = true;
        newItem7.Click += new RoutedEventHandler(this.MenuItemImport_Click);
        contextMenu.Items.Add((object) newItem7);
      }
      newItem6.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Export") + " " + nameCh);
      newItem6.Click += new RoutedEventHandler(this.MenuItemExport_Click);
      newItem6.IsEnabled = true;
      contextMenu.Items.Add((object) newItem6);
      if (AppConfigHelper.GetAppSettingValue<bool>(false, "ShowFakeMenu"))
      {
        System.Windows.Controls.MenuItem newItem8 = this.AddMenuItem(eMenuType.Fake);
        newItem8.Header = (object) LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_FakeDataCfg");
        newItem8.Click += new RoutedEventHandler(this.MenuItemFake_Click);
        newItem8.IsEnabled = true;
        contextMenu.Items.Add((object) newItem8);
      }
      foreach (CmdMibInfo cmdMibInfo in this.listCmdMibInfo)
      {
        if (cmdMibInfo.IsMONameShow())
        {
          if (cmdMibInfo.m_cmdType.Equals("1"))
          {
            System.Windows.Controls.MenuItem newItem9 = this.AddMenuItem(eMenuType.Add);
            newItem9.Header = (object) cmdMibInfo.m_cmdDesc;
            newItem9.Click += new RoutedEventHandler(this.MenuAddItem_Click);
            newItem9.IsEnabled = true;
            newItem1.Items.Add((object) newItem9);
          }
          else if (cmdMibInfo.m_cmdType.Equals("3") || cmdMibInfo.m_cmdType.Equals("4"))
          {
            System.Windows.Controls.MenuItem newItem10 = this.AddMenuItem(eMenuType.Modify);
            newItem10.Header = (object) cmdMibInfo.m_cmdDesc;
            newItem10.Click += new RoutedEventHandler(this.MenuModifyItem_Click);
            if (this.m_selectItems.Count == 0 && cmdMibInfo.m_cmdType.Equals("3") && table.indexNum > 0)
              newItem10.IsEnabled = false;
            else
              newItem10.IsEnabled = true;
            newItem3.Items.Add((object) newItem10);
          }
          else if (cmdMibInfo.m_cmdType.Equals("0"))
          {
            System.Windows.Controls.MenuItem newItem11 = this.AddMenuItem(eMenuType.Query);
            newItem11.Header = (object) cmdMibInfo.m_cmdDesc;
            newItem11.Click += new RoutedEventHandler(this.MenuQueryItem_Click);
            newItem11.IsEnabled = true;
            newItem4.Items.Add((object) newItem11);
            if (table.indexNum > 0)
            {
              System.Windows.Controls.MenuItem newItem12 = this.AddMenuItem(eMenuType.Query);
              newItem12.Header = (object) cmdMibInfo.m_cmdDesc;
              newItem12.Click += new RoutedEventHandler(this.MenuQueryItem_Click);
              newItem12.IsEnabled = true;
              newItem5.Items.Add((object) newItem12);
            }
          }
          else if (cmdMibInfo.m_cmdType.Equals("2"))
          {
            System.Windows.Controls.MenuItem newItem13 = this.AddMenuItem(eMenuType.Delete);
            newItem13.Header = (object) cmdMibInfo.m_cmdDesc;
            newItem13.Click += new RoutedEventHandler(this.MenuDeleteItem_Click);
            newItem13.IsEnabled = true;
            contextMenu.Items.Add((object) newItem13);
          }
        }
      }
      this.ContextMenu = contextMenu;
    }

    private void MenuItemExport_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        if (this.DynamicDataGrid == null)
          return;
        this.GetData();
        DataTable data = new DataTable();
        int count1 = this.DynamicDataGrid.VisibleItems.Count;
        int count2 = this.DynamicDataGrid.Columns.Count;
        if (count1 == 0 && CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_TableExport"), CustomMessageBoxButton.OKCancel, CustomMessageBoxIcon.Question) == CustomMessageBoxResult.Cancel)
          return;
        DataColumn column1 = new DataColumn("RecordIndex");
        data.Columns.Add(column1);
        foreach (BaseColumn column2 in (Collection<GridColumn>) this.DynamicDataGrid.Columns)
        {
          DataColumn column3 = new DataColumn(column2.Header.ToString());
          data.Columns.Add(column3);
        }
        List<string> stringList = new List<string>();
        foreach (KeyValuePair<string, Dictionary<string, string>> lineData in this.LineDataList)
          stringList.Add(lineData.Key);
        int index = 0;
        if (this.DynamicDataGrid.ItemsSource != null)
        {
          foreach (DyDataGrid_MIBModel dataGridMibModel in (IEnumerable) this.DynamicDataGrid.ItemsSource)
          {
            DataRow row = data.NewRow();
            row[0] = (object) stringList[index];
            int columnIndex = 1;
            foreach (Tuple<string, string, object> property in dataGridMibModel.PropertyList)
            {
              string strValue = ((LMT.GridCell) property.Item3).m_Content;
              MibLeafInfo mibNodeInfoByName = SnmpToDatabase.GetMibNodeInfoByName(((LMT.GridCell) property.Item3).MibName_EN, this.m_gnbIp);
              if (mibNodeInfoByName != null && ((LMT.GridCell) property.Item3).cellDataType == DataGrid_CellDataType.RegularType)
              {
                // ISSUE: reference to a compiler-generated field
                if (MainDataGrid.\u003C\u003Eo__37.\u003C\u003Ep__0 == null)
                {
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__37.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (string), typeof (MainDataGrid)));
                }
                // ISSUE: reference to a compiler-generated field
                // ISSUE: reference to a compiler-generated field
                strValue = MainDataGrid.\u003C\u003Eo__37.\u003C\u003Ep__0.Target((CallSite) MainDataGrid.\u003C\u003Eo__37.\u003C\u003Ep__0, SnmpToDatabase.ConvertDefaultValueToInt(mibNodeInfoByName, strValue));
              }
              row[columnIndex] = (object) strValue;
              ++columnIndex;
            }
            data.Rows.Add(row);
            ++index;
          }
        }
        SaveFileDialog saveFileDialog = new SaveFileDialog();
        saveFileDialog.Filter = LanguageServices.Current.IsEnLanguage ? "Excel File(*.xl*;*.xlsx;*.xlsm;*.xls;*.xlm;*.xlw)|*.xl*;*.xlsx;*.xlsm;*.xls;*.xlm;*.xlw|CSV File(*.csv)|*.csv" : "Excel 文件(*.xl*;*.xlsx;*.xlsm;*.xls;*.xlm;*.xlw)|*.xl*;*.xlsx;*.xlsm;*.xls;*.xlm;*.xlw|CSV 文件(*.csv)|*.csv";
        saveFileDialog.FileName = string.Format("{0}_{1}", (object) this.mibTable.nameMib, (object) DateTime.Now.ToString("yyyyMMddhhmmss"));
        saveFileDialog.AddExtension = true;
        saveFileDialog.DefaultExt = "xls";
        if (saveFileDialog.ShowDialog() != DialogResult.OK)
          return;
        if (CommExcelHelper.DataTableToExcel(saveFileDialog.FileName, data, "table-" + this.mibTable.nameMib) == -1)
        {
          int num = (int) CustomMessageBox.Show(this.mibTable.nameMib + LanguageServices.Current.GetTextValue("CfgCompare_Message_ExportFail"));
        }
        else
        {
          this.ShowLogInfo(this.mibTable.nameMib + LanguageServices.Current.GetTextValue("CfgFile_Message_ExportSuc"));
          if (CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_OpenExportFile"), CustomMessageBoxButton.YesNo, CustomMessageBoxIcon.Question) != CustomMessageBoxResult.Yes)
            return;
          Process.Start(saveFileDialog.FileName.Substring(0, saveFileDialog.FileName.LastIndexOf("\\")));
        }
      }
      catch (Exception ex)
      {
        LogManager.Log.Error(ex.ToString(), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1344, nameof (MenuItemExport_Click));
        int num = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ExportError"));
      }
    }

    private void MenuItemImport_Click(object sender, RoutedEventArgs e) => System.Windows.Application.Current.Dispatcher?.Invoke((Action) (() => this.MibTableImportProcess()));

    private void MibTableImportProcess(string filePath = "", bool isDrag = false)
    {
      try
      {
        this.GetData();
        List<string> stringList = new List<string>();
        if (this.DynamicDataGrid?.ItemsSource != null)
        {
          foreach (DyDataGrid_MIBModel dataGridMibModel in (IEnumerable) this.DynamicDataGrid.ItemsSource)
          {
            if (dataGridMibModel.Properties.ContainsKey("indexlist"))
              stringList.Add(dataGridMibModel.Properties["indexlist"] is DataGrid_Cell_MIB property ? property.Indexs : (string) null);
          }
        }
        CmdMibInfo cmdmib = this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("1")));
        if (cmdmib == null)
          return;
        string fileName;
        if (isDrag)
        {
          fileName = filePath;
        }
        else
        {
          OpenFileDialog openFileDialog1 = new OpenFileDialog();
          openFileDialog1.Filter = LanguageServices.Current.IsEnLanguage ? "Excel File(*.xl*;*.xlsx;*.xlsm;*.xls;*.xlm;*.xlw)|*.xl*;*.xlsx;*.xlsm;*.xls;*.xlm;*.xlw|CSV File(*.csv)|*.csv" : "Excel 文件(*.xl*;*.xlsx;*.xlsm;*.xls;*.xlm;*.xlw)|*.xl*;*.xlsx;*.xlsm;*.xls;*.xlm;*.xlw|CSV 文件(*.csv)|*.csv";
          OpenFileDialog openFileDialog2 = openFileDialog1;
          if (openFileDialog2.ShowDialog() != DialogResult.OK)
            return;
          if (string.IsNullOrEmpty(openFileDialog2.FileName))
          {
            int num = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_OpenFileFail"));
            return;
          }
          fileName = openFileDialog2.FileName;
        }
        LogManager.Log.Debug(string.Format("{0}：{1}", (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportFile"), (object) fileName), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1411, nameof (MibTableImportProcess));
        string strErrMsg;
        DataTable dataTable = CommExcelHelper.ExcelToDataTable(fileName, "table-" + this.mibTable.nameMib, out strErrMsg);
        if (dataTable == null)
        {
          int num1 = (int) CustomMessageBox.Show(string.Format("{0}:{1}", (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportFail"), (object) strErrMsg));
        }
        else if (dataTable.Rows.Count == 0)
        {
          int num2 = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportFailEmpty"));
        }
        else
        {
          List<string> childNameChs;
          Dictionary<string, MibLeafInfo> oid2MibLeaf;
          List<string> addCmdOid = this.GetAddCmdOid(this.mibTable.childList, cmdmib, out childNameChs, out oid2MibLeaf);
          Dictionary<int, string> colNameAndColNum = CommExcelHelper.GetColNameAndColNum(dataTable);
          if (colNameAndColNum == null)
          {
            int num3 = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ExcelInfoFail"));
          }
          else if (childNameChs != null)
          {
            if (!this.CheckValidity(childNameChs, colNameAndColNum, out strErrMsg))
            {
              int num4 = (int) CustomMessageBox.Show(string.Format("{0}：{1}", (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportFail"), (object) strErrMsg));
              LogManager.Log.Error(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportExistInvalidColumn"), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1450, nameof (MibTableImportProcess));
            }
            else
            {
              bool flag1 = true;
              int num5 = 0;
              string mibPrefix = SnmpToDatabase.GetMibPrefix();
              Dictionary<string, string> oidToenName = new Dictionary<string, string>();
              Dictionary<string, string> oidToValue = new Dictionary<string, string>();
              foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
              {
                oidToenName.Clear();
                oidToValue.Clear();
                int length = row.ItemArray.Length;
                if (length == 0)
                {
                  LogManager.Log.Error(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ExcelColmEmpty"), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1481, nameof (MibTableImportProcess));
                }
                else
                {
                  string strIndex = row[0].ToString();
                  if (string.IsNullOrWhiteSpace(stringList.Find((Predicate<string>) (p => p.Equals(strIndex)))))
                  {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (string str in addCmdOid)
                    {
                      string item = str;
                      string key = mibPrefix + item + strIndex;
                      MibLeafInfo mibDataByOid;
                      if (oid2MibLeaf.ContainsKey(item))
                      {
                        mibDataByOid = oid2MibLeaf[item];
                      }
                      else
                      {
                        mibDataByOid = Database.GetInstance().GetMibDataByOid(item, this.m_gnbIp);
                        oid2MibLeaf[item] = mibDataByOid;
                      }
                      if (mibDataByOid == null)
                      {
                        LogManager.Log.Error(string.Format("oid={0} {1}", (object) item, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportNoFindLeaf")), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1511, nameof (MibTableImportProcess));
                      }
                      else
                      {
                        string childNameMib = mibDataByOid.childNameMib;
                        string valueToType;
                        if (cmdmib.m_leafDefault != null && cmdmib.m_leafDefault.Keys.Contains<string>(item))
                        {
                          valueToType = cmdmib.m_leafDefault.FirstOrDefault<KeyValuePair<string, string>>((System.Func<KeyValuePair<string, string>, bool>) (p => p.Key == item)).Value;
                        }
                        else
                        {
                          int index = MainDataGrid.GetIndex(mibDataByOid.childNameCh, colNameAndColNum);
                          if (index != -1)
                          {
                            if (index >= length)
                            {
                              LogManager.Log.Error(string.Format("{0} {1}：{2},{3}", (object) mibDataByOid.childNameCh, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportGetIndex1"), (object) index.ToString(), (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportGetIndex2")), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1529, nameof (MibTableImportProcess));
                              continue;
                            }
                            valueToType = this.GetValueToType(row[index].ToString(), mibDataByOid, out strErrMsg);
                            if (valueToType == null)
                            {
                              ShowLogHelper.Show(string.Format("{0}：{1}", (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportDataError"), (object) strErrMsg), this.m_gnbIp);
                              return;
                            }
                          }
                          else
                            continue;
                        }
                        if (!dictionary.ContainsKey(key))
                          dictionary.Add(key, valueToType);
                        if (!oidToenName.Keys.Contains<string>(key))
                        {
                          oidToenName.Add(key, childNameMib);
                          oidToValue.Add(key, valueToType);
                        }
                      }
                    }
                    bool flag2;
                    try
                    {
                      flag2 = !this.IsOnLine ? this.CfgFileAdd(oidToValue, oidToenName, strIndex) : this.SentCmdAndUpdateList(oidToValue, oidToenName, strIndex, UICmdOperatorType.Add);
                    }
                    catch (Exception ex)
                    {
                      LogManager.Log.Error(ex.ToString(), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1563, nameof (MibTableImportProcess));
                      flag2 = false;
                    }
                    if (flag2)
                    {
                      ++num5;
                      if (!this.LineDataList.ContainsKey(strIndex))
                      {
                        this.LineDataList.Add(strIndex, dictionary);
                        this.PageInfo.TotalRecords = this.LineDataList.Count;
                      }
                    }
                    else
                      flag1 = false;
                  }
                }
              }
              if (flag1)
                this.ShowLogInfo(filePath + LanguageServices.Current.GetTextValue("CfgFile_Message_ImportSuc"));
              else if (num5 > 0)
              {
                int num6 = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportEnd"));
              }
              else
              {
                int num7 = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_DataImportFail"));
              }
            }
          }
          else
          {
            int num8 = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ExcelFail"));
            LogManager.Log.Error(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ExcelColumnFail"), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1457, nameof (MibTableImportProcess));
          }
        }
      }
      catch (Exception ex)
      {
        LogManager.Log.Error(ex.ToString(), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1597, nameof (MibTableImportProcess));
        int num = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportError"));
      }
    }

    private bool CfgFileAdd(
      Dictionary<string, string> oidToValue,
      Dictionary<string, string> oidToenName,
      string strIndex)
    {
      string[] strArray = strIndex.Trim('.').Split('.');
      int index = 0;
      string mibPrefix = SnmpToDatabase.GetMibPrefix();
      foreach (MibLeafInfo child in this.mibTable.childList)
      {
        if ("True".Equals(child.IsIndex))
        {
          string key = mibPrefix + child.childOid + strIndex;
          oidToValue[key] = strArray[index];
          oidToenName[key] = child.childNameMib;
          ++index;
        }
        if (index >= strArray.Length)
          break;
      }
      string err = "";
      bool isDyTable = this.mibTable.tableContent > 0;
      if (!CfgLogicMid.GetInstance().AddCfgTableShow(oidToValue, oidToenName, this.cfgUUID, 0, strIndex, this.mibTable, this.m_gnbIp, out err, isDyTable))
        return false;
      this.CfgUpdateData(oidToValue, strIndex, UICmdOperatorType.Add);
      return true;
    }

    public string GetValueToType(string strValue, MibLeafInfo mibLeaf, out string strErrMsg)
    {
      if (mibLeaf == null)
      {
        strErrMsg = LanguageServices.Current.GetTextValue("BaseInfo_Msg_MibEmpty");
        return (string) null;
      }
      strErrMsg = string.Empty;
      string valueToType;
      switch (SnmpToDatabase.GetMibNodeDataType(mibLeaf))
      {
        case DataGrid_CellDataType.enumType:
          if (string.IsNullOrEmpty(strValue))
          {
            strErrMsg = string.Format("[{0}]:{1}", (object) mibLeaf.childNameCh, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_EnumDataEmpty"));
            return (string) null;
          }
          Dictionary<int, string> enumContent = SnmpToDatabase.ConvertSnmpValueToEnumContent(mibLeaf);
          if (enumContent == null || enumContent.Count == 0)
          {
            strErrMsg = string.Format("[{0}]:{1}", (object) mibLeaf.childNameCh, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_EnumValueRangeError"));
            return (string) null;
          }
          if (!enumContent.ContainsValue(strValue))
          {
            strErrMsg = string.Format("[{0}]:{1} [{2}], {3} {4},{5}", (object) mibLeaf.childNameCh, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_EnumValueRange"), (object) mibLeaf.mibValAllList, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_NoContainImportData"), (object) strValue, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_CheckData"));
            return (string) null;
          }
          valueToType = enumContent.FirstOrDefault<KeyValuePair<int, string>>((System.Func<KeyValuePair<int, string>, bool>) (p => p.Value == strValue)).Key.ToString();
          break;
        case DataGrid_CellDataType.bitType:
          if (mibLeaf.IsIndex.Equals("True"))
          {
            if (string.IsNullOrEmpty(strValue))
            {
              strErrMsg = string.Format("[{0}]:{1}", (object) mibLeaf.childNameCh, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_BitDataEmpty"));
              return (string) null;
            }
            uint outValue;
            SnmpMibUtil.GetBitsTypeValueFromDesc(mibLeaf.managerValueRange, strValue, out outValue);
            valueToType = outValue.ToString();
            break;
          }
          goto default;
        default:
          valueToType = strValue;
          break;
      }
      return valueToType;
    }

    private static int GetIndex(string name, Dictionary<int, string> Colnames)
    {
      if (string.IsNullOrEmpty(name) || Colnames == null || Colnames.Count == 0)
        return -1;
      KeyValuePair<int, string> keyValuePair = Colnames.FirstOrDefault<KeyValuePair<int, string>>((System.Func<KeyValuePair<int, string>, bool>) (item => item.Value.Equals(name, StringComparison.OrdinalIgnoreCase)));
      return keyValuePair.Value == null ? -1 : keyValuePair.Key;
    }

    private bool CheckValidity(
      List<string> childNameChs,
      Dictionary<int, string> colIdx2ColName,
      out string strErrMsg)
    {
      strErrMsg = string.Empty;
      foreach (string childNameCh in childNameChs)
      {
        string mibNameCh = childNameCh;
        if (colIdx2ColName.Values.Where<string>((System.Func<string, bool>) (x => x == mibNameCh)).Count<string>() == 0)
        {
          strErrMsg = string.Format("{0} {1} {2}", (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportMibInfo"), (object) mibNameCh, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ImportDataNoExsit"));
          return false;
        }
      }
      return true;
    }

    private List<string> GetAddCmdOid(
      List<MibLeafInfo> leafInfo,
      CmdMibInfo cmdmib,
      out List<string> childNameChs,
      out Dictionary<string, MibLeafInfo> oid2MibLeaf)
    {
      HashSet<string> source = new HashSet<string>();
      childNameChs = new List<string>();
      this.listCmdMibInfo.FindAll((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("0")));
      oid2MibLeaf = new Dictionary<string, MibLeafInfo>();
      try
      {
        foreach (string str in cmdmib.m_leaflist)
        {
          if (cmdmib.m_leafDefault == null || !cmdmib.m_leafDefault.Keys.Contains<string>(str))
          {
            MibLeafInfo mibDataByOid;
            if (oid2MibLeaf.ContainsKey(str))
            {
              mibDataByOid = oid2MibLeaf[str];
            }
            else
            {
              mibDataByOid = Database.GetInstance().GetMibDataByOid(str, this.m_gnbIp);
              if (mibDataByOid == null)
              {
                LogManager.Log.Error(string.Format("Oid:{0} {1}", (object) str, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_NoFindLeaf")), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1810, nameof (GetAddCmdOid));
                continue;
              }
              if (mibDataByOid.IsValidMib())
                oid2MibLeaf.Add(str, mibDataByOid);
              else
                continue;
            }
            source.Add(str);
            childNameChs.Add(mibDataByOid.childNameCh);
          }
        }
        if (cmdmib.m_leafDefault == null)
          return source.ToList<string>();
        foreach (KeyValuePair<string, string> keyValuePair in cmdmib.m_leafDefault)
        {
          MibLeafInfo mibDataByOid;
          if (oid2MibLeaf.ContainsKey(keyValuePair.Key))
          {
            mibDataByOid = oid2MibLeaf[keyValuePair.Key];
          }
          else
          {
            mibDataByOid = Database.GetInstance().GetMibDataByOid(keyValuePair.Key, this.m_gnbIp);
            if (mibDataByOid == null)
            {
              LogManager.Log.Error(string.Format("Oid:{0} {1}", (object) keyValuePair, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_NoFindLeaf")), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1852, nameof (GetAddCmdOid));
              continue;
            }
            if (mibDataByOid.IsValidMib())
              oid2MibLeaf.Add(keyValuePair.Key, mibDataByOid);
            else
              continue;
          }
          if (mibDataByOid.IsValidMib())
            source.Add(keyValuePair.Key);
        }
      }
      catch (Exception ex)
      {
        LogManager.Log.Error(ex.ToString(), "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 1870, nameof (GetAddCmdOid));
        return source.ToList<string>();
      }
      return source.ToList<string>();
    }

    private bool CheckInstance(List<string> Source, string strInstance) => Source.Where<string>((System.Func<string, bool>) (p => p == strInstance)).Count<string>() == 0;

    public T GetParentObject<T>(DependencyObject obj) where T : FrameworkElement
    {
      for (DependencyObject parent = VisualTreeHelper.GetParent(obj); parent != null; parent = VisualTreeHelper.GetParent(parent))
      {
        if (parent is T parentObject)
          return parentObject;
      }
      return default (T);
    }

    private void MenuAddItem_Click(object sender, RoutedEventArgs e)
    {
      System.Windows.Controls.MenuItem menu = sender as System.Windows.Controls.MenuItem;
      if (menu == null)
        return;
      this.isMultiAdd = menu.Header.ToString().Contains(LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_MultiAdd"));
      CmdMibInfo mibInfo = !this.IsOnLine || this.isMultiAdd ? this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("1"))) : this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdDesc.Equals(menu.Header)));
      if (mibInfo == null)
        return;
      BasicInfoParaSetWin basicInfoParaSetWin = new BasicInfoParaSetWin(this);
      basicInfoParaSetWin.InitParaInfo(mibInfo, this.m_ColumnModel.TableProperty as MibTableInfo, (UICmdOperatorType) int.Parse(mibInfo.m_cmdType), this.isMultiAdd, this.IsOnLine, this.m_selectItems);
      basicInfoParaSetWin.ShowDialog();
    }

    private void MenuModifyItem_Click(object sender, RoutedEventArgs e)
    {
      System.Windows.Controls.MenuItem menu = sender as System.Windows.Controls.MenuItem;
      if (menu == null)
        return;
      CmdMibInfo cmdMibInfo = this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdDesc.Equals(menu.Header)));
      int indexNum = ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum;
      if (cmdMibInfo == null)
        return;
      if (cmdMibInfo.m_leafDefault != null)
      {
        if (indexNum > 0)
        {
          if (this.m_selectItems.Count > 0 && cmdMibInfo.m_leaflist.Count == cmdMibInfo.m_leafDefault.Count && !menu.Header.ToString().Contains(LanguageServices.Current.GetTextValue("CellPlan_VM_Add")))
          {
            this.ModifySpecialProcess(cmdMibInfo);
            return;
          }
        }
        else if (cmdMibInfo.m_leaflist.Count == cmdMibInfo.m_leafDefault.Count && !menu.Header.ToString().Contains(LanguageServices.Current.GetTextValue("CellPlan_VM_Add")))
        {
          this.ModifySpecialProcess(cmdMibInfo);
          return;
        }
      }
      BasicInfoParaSetWin basicInfoParaSetWin = new BasicInfoParaSetWin(this);
      basicInfoParaSetWin.InitParaInfo(cmdMibInfo, this.m_ColumnModel.TableProperty as MibTableInfo, (UICmdOperatorType) int.Parse(cmdMibInfo.m_cmdType), this.isMultiAdd, this.IsOnLine, this.m_selectItems);
      basicInfoParaSetWin.ShowDialog();
    }

    private void MenuQueryItem_Click(object sender, RoutedEventArgs e)
    {
      System.Windows.Controls.MenuItem menu = sender as System.Windows.Controls.MenuItem;
      if (menu == null || !(menu.Parent is System.Windows.Controls.MenuItem parent))
        return;
      this.isMultiQuery = parent.Header.ToString().Contains(LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_MutiSrch"));
      MibTableInfo tableProperty = this.m_ColumnModel.TableProperty as MibTableInfo;
      CmdMibInfo cmdMibInfo = this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdDesc.Equals(menu.Header)));
      if (cmdMibInfo == null || tableProperty == null)
        return;
      Dictionary<string, string> dicMibToValue = new Dictionary<string, string>();
      Dictionary<string, string> dicMibToOid = new Dictionary<string, string>();
      this.GetChildMibInfo(cmdMibInfo, ref dicMibToValue, ref dicMibToOid);
      if (tableProperty.indexNum == 0)
      {
        long errorcode = 0;
        if (CommLinkPath.GetMibValueFromCmdExeResult(".0", cmdMibInfo.m_cmdNameEn, ref dicMibToValue, this.m_gnbIp, ref errorcode))
        {
          this.QuerySuccessRefreshDataGrid(dicMibToValue, dicMibToOid, ".0", 0);
        }
        else
        {
          EnbTypeEnum stationFrameType = CSEnbHelper.GetStationFrameType(this.m_gnbIp);
          string errDescById = SnmpErrDescHelper.GetErrDescById(errorcode, stationFrameType);
          if (string.IsNullOrEmpty(errDescById))
            return;
          LogManager.Log.Error(errDescById, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 2023, nameof (MenuQueryItem_Click));
          ShowLogHelper.Show(errDescById, this.m_gnbIp);
        }
      }
      else
      {
        if (tableProperty.indexNum <= 0)
          return;
        if (this.isMultiQuery)
        {
          BasicInfoParaSetWin basicInfoParaSetWin = new BasicInfoParaSetWin(this);
          basicInfoParaSetWin.InitParaInfo(cmdMibInfo, tableProperty, (UICmdOperatorType) int.Parse(cmdMibInfo.m_cmdType), isMultiQuery: this.isMultiQuery);
          this.mutiQueryParaWin = basicInfoParaSetWin;
          basicInfoParaSetWin.ShowDialog();
        }
        else if (this.m_selectItems.Count == 0)
        {
          BasicInfoParaSetWin basicInfoParaSetWin = new BasicInfoParaSetWin(this);
          basicInfoParaSetWin.InitParaInfo(cmdMibInfo, tableProperty, (UICmdOperatorType) int.Parse(cmdMibInfo.m_cmdType));
          basicInfoParaSetWin.ShowDialog();
        }
        else
        {
          string strIndex = "";
          foreach (DyDataGrid_MIBModel selectItem in this.m_selectItems)
          {
            this.GetCurrentSelectIndex(selectItem, ref strIndex);
            long errorcode = 0;
            if (CommLinkPath.GetMibValueFromCmdExeResult(strIndex, cmdMibInfo.m_cmdNameEn, ref dicMibToValue, this.m_gnbIp, ref errorcode))
            {
              this.QuerySuccessRefreshDataGrid(dicMibToValue, dicMibToOid, strIndex, tableProperty.indexNum);
            }
            else
            {
              EnbTypeEnum stationFrameType = CSEnbHelper.GetStationFrameType(this.m_gnbIp);
              string errDescById = SnmpErrDescHelper.GetErrDescById(errorcode, stationFrameType);
              if (!string.IsNullOrEmpty(errDescById))
              {
                LogManager.Log.Error(errDescById, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 2063, nameof (MenuQueryItem_Click));
                ShowLogHelper.Show(errDescById, this.m_gnbIp);
              }
            }
          }
        }
      }
    }

    private void MenuDeleteItem_Click(object sender, RoutedEventArgs e)
    {
      System.Windows.Controls.MenuItem menu = sender as System.Windows.Controls.MenuItem;
      if (menu == null)
        return;
      CmdMibInfo info = this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdDesc.Equals(menu.Header)));
      if (info == null || this.m_selectItems.Count == 0)
        return;
      MibLeafInfo rowStatusInfo = DataGridUtils.GetRowStatusInfo(info, this.m_gnbIp);
      if (rowStatusInfo == null || CustomMessageBoxResult.Yes != CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_DelItem"), CustomMessageBoxButton.YesNo, CustomMessageBoxIcon.Question))
        return;
      this.DeleteCmd(info, rowStatusInfo, "6");
    }

    private void MenuItemFake_Click(object sender, RoutedEventArgs e)
    {
      if (!(sender is System.Windows.Controls.MenuItem))
        return;
      FakeSetting fakeSetting = new FakeSetting(this.m_ColumnModel);
      fakeSetting.Owner = Window.GetWindow((DependencyObject) this);
      fakeSetting.WindowStartupLocation = WindowStartupLocation.CenterOwner;
      fakeSetting.ShowDialog();
    }

    public void GetChildMibInfo(
      CmdMibInfo info,
      ref Dictionary<string, string> dicMibToValue,
      ref Dictionary<string, string> dicMibToOid)
    {
      if (!(this.m_ColumnModel.TableProperty is MibTableInfo tableProperty))
        return;
      List<MibLeafInfo> childList = tableProperty.childList;
      if (dicMibToValue == null)
        dicMibToValue = new Dictionary<string, string>();
      if (dicMibToOid == null)
        dicMibToOid = new Dictionary<string, string>();
      foreach (string str in info.m_leaflist)
      {
        string oid = str;
        MibLeafInfo mibLeafInfo = childList.Find((Predicate<MibLeafInfo>) (p => p.childOid.Equals(oid)));
        if (mibLeafInfo != null)
        {
          dicMibToValue[mibLeafInfo.childNameMib] = (string) null;
          dicMibToOid[mibLeafInfo.childNameMib] = mibLeafInfo.childOid;
        }
      }
    }

    public void QuerySuccessRefreshDataGrid(
      Dictionary<string, string> dicMibToValue,
      Dictionary<string, string> dicMibToOid,
      string strIndex,
      int indexNum)
    {
      Dictionary<string, string> dictionary = new Dictionary<string, string>();
      foreach (string key1 in dicMibToValue.Keys)
      {
        string key2 = indexNum != 0 ? SnmpToDatabase.GetMibPrefix() + dicMibToOid[key1] + strIndex : SnmpToDatabase.GetMibPrefix() + dicMibToOid[key1] + ".0";
        if (!dictionary.ContainsKey(key2))
          dictionary[key2] = dicMibToValue[key1];
      }
      if (!this.LineDataList.ContainsKey(strIndex))
      {
        this.LineDataList.Add(strIndex, dictionary);
        this.LineDataList = DataGridUtils.SortMibDataToIndex(this.LineDataList, indexNum);
        this.PageInfo.TotalRecords = this.LineDataList.Count;
      }
      else
      {
        Dictionary<string, string> lineData = this.LineDataList[strIndex];
        foreach (KeyValuePair<string, string> keyValuePair in dictionary)
        {
          if (!lineData.Keys.ToList<string>().Contains(keyValuePair.Key))
            this.LineDataList[strIndex][keyValuePair.Key] = keyValuePair.Value;
          else if (!lineData[keyValuePair.Key].Equals(keyValuePair.Value))
            lineData[keyValuePair.Key] = keyValuePair.Value;
        }
      }
      this.SetPageInfo();
      int index = this.LineDataList.Keys.ToList<string>().FindIndex((Predicate<string>) (p => p.Equals(strIndex)));
      int num1 = index / this.perPageLineNum + 1;
      int num2 = index % this.perPageLineNum;
      this.PageInfo.TurningPageNum = num1;
      this.btnGo_Click((object) null, (System.Windows.Input.KeyEventArgs) null);
      int count = this.LineDataList.Count;
    }

    public void RefreshDataGrid(
      Dictionary<string, string> dicOidValue,
      string strIndex,
      int nIndexGrade,
      UICmdOperatorType operType)
    {
      try
      {
        if (string.IsNullOrEmpty(strIndex) || dicOidValue == null || dicOidValue.Count == 0)
          return;
        if (operType == UICmdOperatorType.Add)
        {
          if (this.LineDataList.ContainsKey(strIndex))
            return;
        }
        else if (!this.LineDataList.ContainsKey(strIndex))
          return;
        ObservableCollection<DyDataGrid_MIBModel> datalist = (ObservableCollection<DyDataGrid_MIBModel>) this.DynamicDataGrid.ItemsSource;
        if (datalist == null && operType == UICmdOperatorType.Modify)
          return;
        if (datalist == null)
        {
          datalist = new ObservableCollection<DyDataGrid_MIBModel>();
          if (System.Windows.Application.Current.Dispatcher != null)
            System.Windows.Application.Current.Dispatcher.Invoke((Action) (() => this.DynamicDataGrid.DataContext = (object) datalist));
        }
        string mibPrefix = SnmpToDatabase.GetMibPrefix();
        string oid = "";
        string showInfo = "";
        if (operType == UICmdOperatorType.Add && nIndexGrade > 0)
        {
          object obj1 = (object) new DyDataGrid_MIBModel();
          if (DataGridUtils.GetIndexNodeInfo(strIndex, this.m_ColumnModel.TableProperty as MibTableInfo, ref oid, ref showInfo, this.m_gnbIp))
          {
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__0 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__0.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p0 = MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__0;
            object obj2 = obj1;
            DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
            dataGridCellMib.m_Content = showInfo;
            dataGridCellMib.oid = oid + ".";
            dataGridCellMib.m_bIsReadOnly = true;
            dataGridCellMib.MibName_CN = LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc");
            dataGridCellMib.MibName_EN = "indexlist";
            dataGridCellMib.Indexs = strIndex;
            string textValue = LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc");
            target((CallSite) p0, obj2, "indexlist", dataGridCellMib, textValue);
          }
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__1 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__1 = CallSite<Action<CallSite, MainDataGrid, Dictionary<string, string>, string, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.InvokeSimpleName | CSharpBinderFlags.ResultDiscarded, "AddRefreshDataGrid", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__1.Target((CallSite) MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__1, this, dicOidValue, strIndex, obj1);
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__2 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__2 = CallSite<Action<CallSite, ObservableCollection<DyDataGrid_MIBModel>, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "Add", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__2.Target((CallSite) MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__2, datalist, obj1);
          if (this.LineDataList.Count == 1)
          {
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__3 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, DyDataGrid_MIBModel>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (DyDataGrid_MIBModel), typeof (MainDataGrid)));
            }
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            this.ColumnModel = MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__3.Target((CallSite) MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__3, obj1);
            if (this.mibTable != null)
            {
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__4 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__4 = CallSite<Action<CallSite, object, MibTableInfo>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddTableProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__4.Target((CallSite) MainDataGrid.\u003C\u003Eo__54.\u003C\u003Ep__4, obj1, this.mibTable);
            }
          }
          this.CfgFileShowLog(strIndex, operType);
        }
        else if (operType == UICmdOperatorType.Modify || operType == UICmdOperatorType.Other)
        {
          foreach (KeyValuePair<string, string> keyValuePair1 in dicOidValue)
          {
            KeyValuePair<string, string> item = keyValuePair1;
            string str = item.Key.Replace(mibPrefix, "");
            string strMibOid = str.Substring(0, str.Length - strIndex.Length);
            if (!string.IsNullOrEmpty(strMibOid))
            {
              MibLeafInfo mibLeaf = SnmpMibUtil.GetMibNodeInfoByOID(this.m_gnbIp, strMibOid);
              if (mibLeaf != null && !string.IsNullOrWhiteSpace(mibLeaf.IsIndex) && !mibLeaf.IsIndex.Equals("True"))
              {
                DyDataGrid_MIBModel dataGridMibModel = nIndexGrade <= 0 ? datalist.ToList<DyDataGrid_MIBModel>().Find((Predicate<DyDataGrid_MIBModel>) (p => p.Properties.ContainsKey(mibLeaf.childNameMib))) : datalist.ToList<DyDataGrid_MIBModel>().Find((Predicate<DyDataGrid_MIBModel>) (p => (p.Properties["indexlist"] as DataGrid_Cell_MIB).Indexs.Equals(strIndex) && p.Properties.ContainsKey(mibLeaf.childNameMib)));
                if (dataGridMibModel == null)
                  return;
                string newval = (string) null;
                string mContent;
                if (dataGridMibModel.Properties[mibLeaf.childNameMib] is DataGrid_Cell_MIB_ENUM)
                {
                  DataGrid_Cell_MIB_ENUM property = dataGridMibModel.Properties[mibLeaf.childNameMib] as DataGrid_Cell_MIB_ENUM;
                  mContent = property.m_Content;
                  if (property.oid.Equals(item.Key))
                  {
                    property.m_CurrentValue = int.Parse(item.Value);
                    property.m_Content = SnmpToDatabase.ConvertSnmpValueToString(mibLeaf.childNameMib, item.Value, this.m_gnbIp) as string;
                    newval = property.m_Content;
                  }
                }
                else if (dataGridMibModel.Properties[mibLeaf.childNameMib] is DataGrid_Cell_MIB_BIT)
                {
                  DataGrid_Cell_MIB_BIT property = dataGridMibModel.Properties[mibLeaf.childNameMib] as DataGrid_Cell_MIB_BIT;
                  mContent = property.m_Content;
                  if (property.oid.Equals(item.Key))
                  {
                    property.m_Content = SnmpToDatabase.ConvertSnmpValueToString(mibLeaf.childNameMib, item.Value, this.m_gnbIp) as string;
                    newval = property.m_Content;
                  }
                }
                else
                {
                  DataGrid_Cell_MIB property = dataGridMibModel.Properties[mibLeaf.childNameMib] as DataGrid_Cell_MIB;
                  mContent = property.m_Content;
                  if (property.oid.Equals(item.Key))
                  {
                    property.m_Content = SnmpToDatabase.ConvertSnmpValueToString(mibLeaf.childNameMib, item.Value, this.m_gnbIp) as string;
                    newval = property.m_Content;
                  }
                }
                if (!string.IsNullOrWhiteSpace(mContent) && !string.IsNullOrWhiteSpace(newval) && !mContent.Equals(newval))
                  this.CfgFileModifyShowLog(mibLeaf.childNameCh, mibLeaf.childNameMib, mContent, newval, strIndex);
                KeyValuePair<string, string> keyValuePair2 = this.LineDataList[strIndex].ToList<KeyValuePair<string, string>>().Find((Predicate<KeyValuePair<string, string>>) (p => p.Key.Equals(item.Key) && !p.Value.Equals(item.Value)));
                if (!string.IsNullOrEmpty(keyValuePair2.Key))
                  this.LineDataList[strIndex][keyValuePair2.Key] = item.Value;
              }
            }
          }
        }
        else
        {
          if (operType != UICmdOperatorType.Del)
            return;
          DyDataGrid_MIBModel dataGridMibModel = datalist.ToList<DyDataGrid_MIBModel>().Find((Predicate<DyDataGrid_MIBModel>) (p => (p.Properties["indexlist"] as DataGrid_Cell_MIB).Indexs.Equals(strIndex)));
          if (dataGridMibModel == null)
            return;
          this.CfgFileShowLog(strIndex, operType);
          datalist.Remove(dataGridMibModel);
          this.LineDataList.Remove(strIndex);
          this.PageInfo.TotalRecords = this.LineDataList.Count;
        }
        if (System.Windows.Application.Current.Dispatcher == null)
          return;
        System.Windows.Application.Current.Dispatcher.BeginInvoke(DispatcherPriority.Background, (Delegate) (() =>
        {
          this.DynamicDataGrid.DataContext = (object) null;
          this.DynamicDataGrid.DataContext = (object) datalist;
          this.DynamicDataGrid.CurrentItem = (object) null;
        }));
      }
      catch (Exception ex)
      {
        LogManager.Log.Error("RefreshDataGrid：" + ex.Message, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 2386, nameof (RefreshDataGrid));
      }
    }

    private bool AddRefreshDataGrid(
      Dictionary<string, string> dicOidValue,
      string strIndex,
      object model)
    {
      if (this.listCmdMibInfo == null || this.listCmdMibInfo.Count == 0)
        return false;
      List<CmdMibInfo> all = this.listCmdMibInfo.FindAll((Predicate<CmdMibInfo>) (p => p.IsQueryCmd() && !p.m_bIgnoreThisCmd));
      if (all.Count == 0)
        return true;
      string mibPrefix = SnmpToDatabase.GetMibPrefix();
      foreach (CmdMibInfo cmdMibInfo in all)
      {
        if (cmdMibInfo.IsMONameShow())
        {
          foreach (string oid in cmdMibInfo.m_leaflist)
          {
            MibLeafInfo mibNodeInfoByOid = SnmpToDatabase.GetMibNodeInfoByOid(oid, this.m_gnbIp);
            if ((mibNodeInfoByOid != null ? (mibNodeInfoByOid.IsRowStatus() ? 1 : 0) : 1) == 0 && mibNodeInfoByOid.IsValidMib() && !string.IsNullOrWhiteSpace(mibNodeInfoByOid?.IsIndex))
            {
              string str = mibPrefix + oid + strIndex;
              string defaultValue = SnmpToDatabase.GetDefaultValue(mibNodeInfoByOid);
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__2 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__2 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              Func<CallSite, object, bool> target1 = MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__2.Target;
              // ISSUE: reference to a compiler-generated field
              CallSite<Func<CallSite, object, bool>> p2 = MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__2;
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__1 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__1 = CallSite<Func<CallSite, object, string, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "ContainsKey", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              Func<CallSite, object, string, object> target2 = MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__1.Target;
              // ISSUE: reference to a compiler-generated field
              CallSite<Func<CallSite, object, string, object>> p1 = MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__1;
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__0 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Properties", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              object obj1 = MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__0.Target((CallSite) MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__0, model);
              string childNameMib = mibNodeInfoByOid.childNameMib;
              object obj2 = target2((CallSite) p1, obj1, childNameMib);
              if (!target1((CallSite) p2, obj2))
              {
                if (dicOidValue.ContainsKey(str))
                {
                  LMT.GridCell gridCell = DataGridCellFactory.CreateGridCell(mibNodeInfoByOid.childNameMib, mibNodeInfoByOid.childNameCh, dicOidValue[str], str, this.m_gnbIp, this.IsOnLine, this.IsCfgFile);
                  // ISSUE: reference to a compiler-generated field
                  if (MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__3 == null)
                  {
                    // ISSUE: reference to a compiler-generated field
                    MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__3 = CallSite<Action<CallSite, object, string, LMT.GridCell, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                    {
                      CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                      CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                      CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                      CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                    }));
                  }
                  // ISSUE: reference to a compiler-generated field
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__3.Target((CallSite) MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__3, model, mibNodeInfoByOid.childNameMib, gridCell, mibNodeInfoByOid.childNameCh);
                }
                else
                {
                  LMT.GridCell gridCell = DataGridCellFactory.CreateGridCell(mibNodeInfoByOid.childNameMib, mibNodeInfoByOid.childNameCh, defaultValue, str, this.m_gnbIp, this.IsOnLine, this.IsCfgFile);
                  // ISSUE: reference to a compiler-generated field
                  if (MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__4 == null)
                  {
                    // ISSUE: reference to a compiler-generated field
                    MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__4 = CallSite<Action<CallSite, object, string, LMT.GridCell, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                    {
                      CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                      CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                      CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                      CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                    }));
                  }
                  // ISSUE: reference to a compiler-generated field
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__4.Target((CallSite) MainDataGrid.\u003C\u003Eo__55.\u003C\u003Ep__4, model, mibNodeInfoByOid.childNameMib, gridCell, mibNodeInfoByOid.childNameCh);
                }
                if (!this.LineDataList.ContainsKey(strIndex))
                {
                  this.LineDataList.Add(strIndex, new Dictionary<string, string>());
                  this.PageInfo.TotalRecords = this.LineDataList.Count;
                }
                if (!this.LineDataList[strIndex].ContainsKey(str))
                {
                  if (dicOidValue.ContainsKey(str))
                    this.LineDataList[strIndex].Add(str, dicOidValue[str]);
                  else
                    this.LineDataList[strIndex].Add(str, defaultValue);
                }
              }
            }
          }
        }
      }
      return true;
    }

    public void SetDataParaOid(
      ObservableCollection<DataSetPara> datalist,
      string strIndex,
      ref Dictionary<string, string> oidToValue,
      ref Dictionary<string, string> oidToenName)
    {
      string mibPrefix = SnmpToDatabase.GetMibPrefix();
      if (oidToValue == null)
        oidToValue = new Dictionary<string, string>();
      if (oidToenName == null)
        oidToenName = new Dictionary<string, string>();
      foreach (DataSetPara para in (Collection<DataSetPara>) datalist)
      {
        MibLeafInfo mibNodeInfoByName = SnmpToDatabase.GetMibNodeInfoByName(para.MibNameEN, this.m_gnbIp);
        if (mibNodeInfoByName == null)
        {
          string textValue = LanguageServices.Current.GetTextValue("CellPlan_Msg_NoMibInfo");
          LogManager.Log.Error(textValue, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 2481, nameof (SetDataParaOid));
          ShowLogHelper.Show(textValue, this.m_gnbIp);
          break;
        }
        string valueToType = this.GetValueToType(para, mibNodeInfoByName);
        if (!"True".Equals(mibNodeInfoByName.IsIndex))
        {
          string key = para.OID.Contains(mibPrefix) ? para.OID + strIndex : mibPrefix + para.OID + strIndex;
          if (!oidToValue.ContainsKey(key) && para.IsSelected)
            oidToValue.Add(key, valueToType);
          if (!oidToenName.ContainsKey(key) && para.IsSelected)
            oidToenName.Add(key, mibNodeInfoByName.childNameMib);
        }
      }
    }

    public string GetValueToType(DataSetPara para, MibLeafInfo mibLeaf)
    {
      string valueToType;
      if (para.ParaType == DataGrid_CellDataType.enumType)
        valueToType = !para.DicList.ContainsValue(para.ParaValue) ? para.ParaValue : para.DicList.FirstOrDefault<KeyValuePair<int, string>>((System.Func<KeyValuePair<int, string>, bool>) (p => p.Value == para.ParaValue)).Key.ToString();
      else if (para.ParaType == DataGrid_CellDataType.bitType && mibLeaf.IsIndex.Equals("True"))
      {
        uint outValue;
        SnmpMibUtil.GetBitsTypeValueFromDesc(mibLeaf.managerValueRange, para.ParaValue, out outValue);
        valueToType = outValue.ToString();
      }
      else
        valueToType = para.ParaValue;
      return valueToType;
    }

    private void DeleteCmd(CmdMibInfo info, MibLeafInfo leaf, string value)
    {
      MibTableInfo reData;
      if (!Database.GetInstance().GetMibDataByTableName(info.m_tableName, out reData, this.m_gnbIp, out string _))
      {
        int num = (int) CustomMessageBox.Show(string.Format("{0} {1}", (object) info.m_tableName, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_FindMibFail")));
      }
      else
      {
        int indexNum = reData.indexNum;
        string mibPrefix = SnmpToDatabase.GetMibPrefix();
        string strIndex = (string) null;
        foreach (DyDataGrid_MIBModel selectItem in this.m_selectItems)
        {
          DataGridUtils.GetMibIndex(selectItem.Properties, indexNum, out strIndex);
          List<CDTLmtbVb> setVbs = new List<CDTLmtbVb>();
          setVbs.Add(new CDTLmtbVb()
          {
            Oid = mibPrefix + leaf.childOid + strIndex,
            Value = value,
            SnmpSyntax = LmtbSnmpEx.GetSyntax(leaf.mibSyntax)
          });
          CDTLmtbPdu lmtPdu = new CDTLmtbPdu();
          if (CDTCmdExecuteMgr.VbsSetSync(setVbs, out long _, this.m_gnbIp, ref lmtPdu) != 0)
          {
            string msg = string.Format("{0},EnbIP:{1}", (object) LanguageServices.Current.GetTextValue("CellPlan_Msg_ParaDeleteFail"), (object) this.m_gnbIp);
            LogManager.Log.Error(msg, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 2577, nameof (DeleteCmd));
            ShowLogHelper.Show(msg, this.m_gnbIp);
            break;
          }
          if (lmtPdu.m_LastErrorStatus != 0L)
          {
            EnbTypeEnum stationFrameType = CSEnbHelper.GetStationFrameType(this.m_gnbIp);
            string msg = string.Format("{0}:{1}", (object) LanguageServices.Current.GetTextValue("CellPlan_Msg_DeleteFailErrorInfo"), (object) SnmpErrDescHelper.GetErrDescById(lmtPdu.m_LastErrorStatus, stationFrameType));
            LogManager.Log.Error(msg, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 2586, nameof (DeleteCmd));
            ShowLogHelper.Show(msg, this.m_gnbIp);
            break;
          }
          Dictionary<string, string> dicOidAndValue = new Dictionary<string, string>();
          this.SetUpdateData(lmtPdu, ref dicOidAndValue);
          this.RefreshDataGrid(dicOidAndValue, strIndex, indexNum, UICmdOperatorType.Del);
          if (this.LineDataList.ContainsKey(strIndex))
          {
            this.LineDataList.Remove(strIndex);
            this.PageInfo.TotalRecords = this.LineDataList.Count;
          }
        }
      }
    }

    private void ModifySpecialProcess(CmdMibInfo info)
    {
      ObservableCollection<DataSetPara> datalist = new ObservableCollection<DataSetPara>();
      int num1 = 0;
      foreach (string key in info.m_leafDefault.Keys)
      {
        MibLeafInfo mibDataByOid = Database.GetInstance().GetMibDataByOid(key, this.m_gnbIp);
        if (mibDataByOid != null)
        {
          if (mibDataByOid.ASNType.Equals("RowStatus") && info.m_leafDefault[key].Equals("6"))
          {
            this.DeleteCmd(info, mibDataByOid, info.m_leafDefault[key]);
          }
          else
          {
            string strValue = info.m_leafDefault[key];
            DataSetPara dataSetPara = new DataSetPara();
            dataSetPara.OID = mibDataByOid.childOid;
            dataSetPara.ID = num1;
            dataSetPara.IsSelected = true;
            dataSetPara.ParaName = mibDataByOid.childNameCh;
            dataSetPara.MibNameEN = mibDataByOid.childNameMib;
            dataSetPara.ParaRange = mibDataByOid.mibValAllList;
            dataSetPara.ParaUnit = mibDataByOid.unit;
            dataSetPara.MibDesc = mibDataByOid.GetDetailValue();
            dataSetPara.ParaType = SnmpToDatabase.GetMibNodeDataType(mibDataByOid.childNameMib, this.m_gnbIp);
            if (dataSetPara.ParaType == DataGrid_CellDataType.RegularType || dataSetPara.ParaType == DataGrid_CellDataType.OID || dataSetPara.ParaType == DataGrid_CellDataType.Array)
              dataSetPara.ParaValue = SnmpToDatabase.ConvertSnmpValueToString(mibDataByOid.childNameMib, strValue, this.m_gnbIp) as string;
            else if (dataSetPara.ParaType == DataGrid_CellDataType.enumType || dataSetPara.ParaType == DataGrid_CellDataType.bitType)
            {
              dataSetPara.DicList = SnmpToDatabase.ConvertSnmpValueToEnumContent(mibDataByOid.childNameMib, this.m_gnbIp);
              dataSetPara.ParaValue = SnmpToDatabase.ConvertSnmpValueToString(mibDataByOid.childNameMib, strValue, this.m_gnbIp) as string;
            }
            else if (dataSetPara.ParaType == DataGrid_CellDataType.DateTime)
              dataSetPara.ParaValue = strValue;
            datalist.Add(dataSetPara);
            ++num1;
          }
        }
      }
      if (datalist.Count == 0)
      {
        int num2 = (int) System.Windows.MessageBox.Show(string.Format("{0} {1}", (object) info.m_cmdDesc, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ParaEmpty")));
      }
      else
      {
        int indexNum = ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum;
        if (this.m_selectItems.Count == 0)
        {
          if (indexNum == 0 && this.SendOneCmd(".0", (IEnumerable<DataSetPara>) datalist))
            return;
          int num3 = (int) CustomMessageBox.Show(string.Format(LanguageServices.Current.GetTextValue("BaseInfo_Msg_SendCommad"), (object) info.m_cmdDesc));
        }
        else
        {
          foreach (DyDataGrid_MIBModel selectItem in this.m_selectItems)
          {
            string strIndex = "";
            if (string.IsNullOrWhiteSpace(strIndex))
            {
              if (indexNum > 0)
                this.GetCurrentSelectIndex(selectItem, ref strIndex);
              else
                strIndex = ".0";
            }
            if (!this.SendOneCmd(strIndex, (IEnumerable<DataSetPara>) datalist))
            {
              ShowLogHelper.Show(string.Format(LanguageServices.Current.GetTextValue("BaseInfo_Msg_SendCommad"), (object) info.m_cmdDesc), this.m_gnbIp);
              break;
            }
          }
        }
      }
    }

    private bool SendOneCmd(string strIndex, IEnumerable<DataSetPara> datalist)
    {
      Dictionary<string, string> oidToValue = new Dictionary<string, string>();
      Dictionary<string, string> oidToenName = new Dictionary<string, string>();
      string mibPrefix = SnmpToDatabase.GetMibPrefix();
      foreach (DataSetPara dataSetPara in datalist)
      {
        DataSetPara para = dataSetPara;
        string str = para.ParaType != DataGrid_CellDataType.enumType ? para.ParaValue : (!para.DicList.ContainsValue(para.ParaValue) ? para.ParaValue : para.DicList.FirstOrDefault<KeyValuePair<int, string>>((System.Func<KeyValuePair<int, string>, bool>) (p => p.Value == para.ParaValue)).Key.ToString());
        MibLeafInfo mibNodeInfoByName = SnmpToDatabase.GetMibNodeInfoByName(para.MibNameEN, this.m_gnbIp);
        if (mibNodeInfoByName == null)
          return false;
        string key = para.OID.Contains(mibPrefix) ? para.OID + strIndex : mibPrefix + para.OID + strIndex;
        if (!oidToValue.ContainsKey(key) && para.IsSelected)
          oidToValue.Add(key, str);
        if (!oidToenName.ContainsKey(key) && para.IsSelected)
          oidToenName.Add(key, mibNodeInfoByName.childNameMib);
      }
      this.SentCmdAndUpdateList(oidToValue, oidToenName, strIndex, UICmdOperatorType.Modify);
      return true;
    }

    public bool SentCmdAndUpdateList(
      Dictionary<string, string> oidToValue,
      Dictionary<string, string> oidToenName,
      string strindex,
      UICmdOperatorType cmdType,
      string strIp = null)
    {
      if (string.IsNullOrEmpty(strIp))
        strIp = this.m_gnbIp;
      if (strIp.Equals(this.m_gnbIp) && this.IsBidAndActiveOrDeactiveNrCell(oidToenName, strindex))
      {
        KeyValuePair<string, string> keyValuePair = oidToenName.First<KeyValuePair<string, string>>((System.Func<KeyValuePair<string, string>, bool>) (item => item.Value.Equals("nrCellActiveTrigger", StringComparison.OrdinalIgnoreCase)));
        string oid = keyValuePair.Key;
        keyValuePair = oidToValue.First<KeyValuePair<string, string>>((System.Func<KeyValuePair<string, string>, bool>) (item => item.Key.StartsWith(oid)));
        string strNewValue = keyValuePair.Value;
        Singleton<BidHelper>.GetInstance().MibDataReplaceUpdate("nrCellEntry", "nrCellActiveTrigger", strindex, strNewValue);
        Singleton<BidHelper>.GetInstance().MibDataReplaceUpdate("nrCellEntry", "nrCellOperationalState", strindex, strNewValue);
        Singleton<BidHelper>.GetInstance().WriteMemoryToBidJson();
        return true;
      }
      CDTLmtbPdu lmtPdu = new CDTLmtbPdu();
      string err;
      if (!DataGridUtils.AddAndModifyCmd(oidToValue, oidToenName, strIp, cmdType, ref lmtPdu, out err))
      {
        LogManager.Log.Error(err, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 2783, nameof (SentCmdAndUpdateList));
        ShowLogHelper.Show(err, strIp);
        return false;
      }
      if (lmtPdu.m_LastErrorStatus != 0L)
      {
        EnbTypeEnum stationFrameType = CSEnbHelper.GetStationFrameType(strIp);
        string msg = string.Format("{0} {1}", (object) LanguageServices.Current.GetTextValue("CellPlan_Msg_ConfigureFailErrorInfo"), (object) SnmpErrDescHelper.GetErrDescById(lmtPdu.m_LastErrorStatus, stationFrameType));
        CDTLmtbVb vbByIndexEx = lmtPdu.GetVbByIndexEx((int) lmtPdu.m_LastErrorIndex - 1);
        if (lmtPdu.m_LastErrorStatus == 10L && vbByIndexEx != null)
        {
          string oid = vbByIndexEx.Oid;
          string str = vbByIndexEx.Value;
          if (oidToenName.ContainsKey(oid))
          {
            string mibName = oidToenName[oid];
            if (!string.IsNullOrEmpty(mibName))
            {
              MibLeafInfo mibNodeInfoByName = SnmpToDatabase.GetMibNodeInfoByName(mibName, strIp);
              if (mibNodeInfoByName != null)
                msg = string.Format("{0}\r\n" + LanguageServices.Current.GetTextValue("BaseInfo_Msg_ConfigError") + "：{1}\r\n" + LanguageServices.Current.GetTextValue("BaseInfo_Msg_SendValue") + "：{2}\r\n" + LanguageServices.Current.GetTextValue("BaseInfo_Msg_NodeValueRange") + "：{3}\r\n" + LanguageServices.Current.GetTextValue("BaseInfo_Msg_CheckValue"), (object) msg, (object) mibNodeInfoByName.childNameCh, (object) str, (object) mibNodeInfoByName.managerValueRange);
            }
          }
        }
        LogManager.Log.Error(msg, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 2821, nameof (SentCmdAndUpdateList));
        ShowLogHelper.Show(msg, strIp);
        return false;
      }
      if (strIp.Equals(this.m_gnbIp))
      {
        Dictionary<string, string> dicOidAndValue = new Dictionary<string, string>();
        this.SetUpdateData(lmtPdu, ref dicOidAndValue);
        this.RefreshDataGrid(dicOidAndValue, strindex, ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum, cmdType);
      }
      return true;
    }

    private bool IsBidAndActiveOrDeactiveNrCell(
      Dictionary<string, string> oidToenName,
      string strindex)
    {
      return false;
    }

    private void GetCurrentSelectIndex(DyDataGrid_MIBModel selectModel, ref string strIndex)
    {
      if (this.m_selectItems.Count == 0 || this.m_ColumnModel == null)
        return;
      foreach (KeyValuePair<string, object> property in selectModel.Properties)
      {
        if (!property.Key.Equals("indexlist") && SnmpToDatabase.GetMibNodeInfoByName(property.Key, this.m_gnbIp) != null)
        {
          if (property.Value is DataGrid_Cell_MIB)
          {
            DataGrid_Cell_MIB dataGridCellMib = property.Value as DataGrid_Cell_MIB;
            if (this.m_ColumnModel.TableProperty != null && ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum > 0)
              strIndex = MibStringHelper.GetIndexValueByGrade(dataGridCellMib?.oid, ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum);
          }
          else if (property.Value is DataGrid_Cell_MIB_ENUM)
          {
            DataGrid_Cell_MIB_ENUM dataGridCellMibEnum = property.Value as DataGrid_Cell_MIB_ENUM;
            if (this.m_ColumnModel.TableProperty != null && ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum > 0)
              strIndex = MibStringHelper.GetIndexValueByGrade(dataGridCellMibEnum?.oid, ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum);
          }
          else if (property.Value is DataGrid_Cell_MIB_BIT)
          {
            DataGrid_Cell_MIB_BIT dataGridCellMibBit = property.Value as DataGrid_Cell_MIB_BIT;
            if (this.m_ColumnModel.TableProperty != null && ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum > 0)
              strIndex = MibStringHelper.GetIndexValueByGrade(dataGridCellMibBit?.oid, ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum);
          }
          if (!string.IsNullOrWhiteSpace(strIndex))
            break;
        }
      }
      if (this.m_ColumnModel.TableProperty == null || ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum != 0)
        return;
      strIndex = ".0";
    }

    private void SetUpdateData(CDTLmtbPdu lmtPdu, ref Dictionary<string, string> dicOidAndValue)
    {
      if (dicOidAndValue == null)
        dicOidAndValue = new Dictionary<string, string>();
      if (lmtPdu == null || lmtPdu.VbCount() == 0)
        return;
      int num = lmtPdu.VbCount();
      for (int index = 0; index < num; ++index)
      {
        CDTLmtbVb vbByIndexEx = lmtPdu.GetVbByIndexEx(index);
        string utf8 = vbByIndexEx.Value;
        if (vbByIndexEx.SnmpSyntax == SNMP_SYNTAX_TYPE.SNMP_SYNTAX_OCTETS)
          utf8 = CommString.ConvertPathHexStringToUtf8(vbByIndexEx.Value);
        if (!dicOidAndValue.ContainsKey(vbByIndexEx.Oid))
          dicOidAndValue.Add(vbByIndexEx.Oid, utf8);
      }
    }

    public void CfgUpdateData(
      Dictionary<string, string> dicOidAndValue,
      string strindex,
      UICmdOperatorType operType,
      int isModifyNum = 0)
    {
      if (this.m_ColumnModel == null)
        return;
      this.RefreshDataGrid(dicOidAndValue, strindex, ((MibTableInfo) this.m_ColumnModel.TableProperty).indexNum, operType);
    }

    private void Bit_EditValueChanged(object sender, EditValueChangedEventArgs e)
    {
    }

    private ObservableCollection<string> BitContentToItems(string value)
    {
      List<string> stringList = new List<string>();
      if (string.IsNullOrEmpty(value))
        return (ObservableCollection<string>) null;
      List<string> list = ((IEnumerable<string>) value.Split('/')).ToList<string>();
      return list.Count <= 0 ? (ObservableCollection<string>) null : new ObservableCollection<string>(list);
    }

    public void SetDataGridInfo(
      Dictionary<string, string> oidcn,
      Dictionary<string, string> oiden,
      MibTableInfo table)
    {
      if (oidcn == null || oiden == null || table == null)
        return;
      this.oid_cn = oidcn;
      this.oid_en = oiden;
      this.mibTable = table;
      this.IndexCount = table.indexNum;
      this.PageInfo.PerPageNum = this.perPageLineNum;
      this.PageInfo.TotalRecords = this.LineDataList.Count;
      this.SetPageInfo();
      this.PageInfo.CurrentPage = 1;
      this.DynamicDataGrid.DataContext = (object) null;
      this.m_selectItems.Clear();
      this.DynamicDataGrid.CurrentItem = (object) null;
    }

    private void SetPageInfo()
    {
      if (this.perPageLineNum <= 0)
      {
        int num = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_LineNum"));
      }
      else
      {
        this.totalLineNum = this.LineDataList.Count;
        this.totalPageNum = this.totalLineNum % this.perPageLineNum != 0 ? this.totalLineNum / this.perPageLineNum + 1 : this.totalLineNum / this.perPageLineNum;
        this.PageInfo.TotalPage = this.totalPageNum;
        this.PageInfo.TurningPageNum = 1;
      }
    }

    public void RefreshDataGridPage(int curentPage)
    {
      try
      {
        if (this.LineDataList.Count == 0 || this.mibTable == null)
        {
          this.UserOperModeNullTableProcess();
        }
        else
        {
          if (this.oid_cn == null || this.oid_en == null)
            return;
          List<string> stringList = new List<string>();
          ObservableCollection<GridColumn> tempColuns = new ObservableCollection<GridColumn>((IEnumerable<GridColumn>) this.DynamicDataGrid.Columns);
          this.DynamicDataGrid.DataContext = (object) null;
          int num1 = 0;
          int num2 = 0;
          ObservableCollection<DyDataGrid_MIBModel> observableCollection = new ObservableCollection<DyDataGrid_MIBModel>();
          object obj1 = (object) null;
          foreach (string key1 in this.LineDataList.Keys)
          {
            ++num2;
            if (curentPage == 1)
            {
              if (curentPage * this.perPageLineNum < num2)
                break;
            }
            else if (num2 <= curentPage * this.perPageLineNum)
            {
              if (num2 <= (curentPage - 1) * this.perPageLineNum || num2 > curentPage * this.perPageLineNum)
                continue;
            }
            else
              break;
            obj1 = (object) new DyDataGrid_MIBModel();
            string[] strArray = key1.Trim('.').Split('.');
            if (strArray.Length < this.IndexCount)
              return;
            if (this.IndexCount > 0)
            {
              string str = "";
              for (int index = 0; index < this.IndexCount; ++index)
              {
                string oid = this.mibTable.oid + "." + (object) (index + 1);
                string key2 = SnmpToDatabase.GetMibPrefix() + oid;
                str = str + this.oid_cn[key2] + DataGridUtils.GetShowContentIndex(oid, strArray[index], this.m_gnbIp) + " ";
                if (!stringList.Contains(key2))
                  stringList.Add(key2);
              }
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__0 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__0.Target;
              // ISSUE: reference to a compiler-generated field
              CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p0 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__0;
              object obj2 = obj1;
              DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
              dataGridCellMib.m_Content = str;
              dataGridCellMib.oid = SnmpToDatabase.GetMibPrefix() + this.mibTable.oid + ".";
              dataGridCellMib.m_bIsReadOnly = true;
              dataGridCellMib.MibName_CN = LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc");
              dataGridCellMib.MibName_EN = "indexlist";
              dataGridCellMib.Indexs = key1;
              string textValue = LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc");
              target((CallSite) p0, obj2, "indexlist", dataGridCellMib, textValue);
            }
            if (this.mibTable != null)
            {
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__1 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__1 = CallSite<Action<CallSite, object, MibTableInfo>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddTableProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__1.Target((CallSite) MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__1, obj1, this.mibTable);
            }
            foreach (KeyValuePair<string, string> keyValuePair in this.oid_cn)
            {
              string key3 = keyValuePair.Key;
              string MibNameCN = keyValuePair.Value;
              string str1 = this.oid_en[key3];
              string str2 = key3 + key1;
              Dictionary<string, string> lineData = this.LineDataList[key1];
              if (!stringList.Contains(key3))
              {
                MibLeafInfo mibNodeInfoByName = SnmpToDatabase.GetMibNodeInfoByName(str1, this.m_gnbIp);
                if (mibNodeInfoByName == null)
                {
                  if (Singleton<BidHelper>.Instance.IsActiveBid())
                  {
                    string str3 = "";
                    if (lineData.ContainsKey(str2))
                      str3 = lineData[str2];
                    // ISSUE: reference to a compiler-generated field
                    if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__2 == null)
                    {
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__2 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                      {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                      }));
                    }
                    // ISSUE: reference to a compiler-generated field
                    Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__2.Target;
                    // ISSUE: reference to a compiler-generated field
                    CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p2 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__2;
                    object obj3 = obj1;
                    string str4 = str1;
                    DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
                    dataGridCellMib.m_Content = str3;
                    dataGridCellMib.oid = str2;
                    dataGridCellMib.m_bIsReadOnly = true;
                    dataGridCellMib.MibName_CN = MibNameCN;
                    dataGridCellMib.MibName_EN = str1;
                    string str5 = MibNameCN;
                    target((CallSite) p2, obj3, str4, dataGridCellMib, str5);
                  }
                }
                else
                {
                  string str6 = MibNameCN;
                  if (!string.IsNullOrEmpty(mibNodeInfoByName.unit))
                    str6 = MibNameCN + ":(" + mibNodeInfoByName.unit + ")";
                  if (lineData.ContainsKey(str2))
                  {
                    string utf8 = lineData[str2];
                    if (mibNodeInfoByName != null && mibNodeInfoByName.ASNType.Equals("DisplayString"))
                      utf8 = CommString.ConvertPathHexStringToUtf8(lineData[str2]);
                    LMT.GridCell gridCell = DataGridCellFactory.CreateGridCell(str1, MibNameCN, utf8, str2, this.m_gnbIp, this.IsOnLine, this.IsCfgFile);
                    if (gridCell == null)
                    {
                      DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
                      dataGridCellMib.oid = str2;
                      dataGridCellMib.MibName_CN = MibNameCN;
                      dataGridCellMib.MibName_EN = str1;
                      dataGridCellMib.m_Content = lineData[str2];
                      dataGridCellMib.m_bIsReadOnly = true;
                      gridCell = (LMT.GridCell) dataGridCellMib;
                    }
                    // ISSUE: reference to a compiler-generated field
                    if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__3 == null)
                    {
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__3 = CallSite<Action<CallSite, object, string, LMT.GridCell, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                      {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                      }));
                    }
                    // ISSUE: reference to a compiler-generated field
                    // ISSUE: reference to a compiler-generated field
                    MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__3.Target((CallSite) MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__3, obj1, str1, gridCell, str6);
                  }
                  else if (this.IsCfgFile || this.IsOnLine)
                  {
                    // ISSUE: reference to a compiler-generated field
                    if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__4 == null)
                    {
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__4 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                      {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                      }));
                    }
                    // ISSUE: reference to a compiler-generated field
                    Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__4.Target;
                    // ISSUE: reference to a compiler-generated field
                    CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p4 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__4;
                    object obj4 = obj1;
                    string str7 = str1;
                    DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
                    dataGridCellMib.m_Content = "";
                    dataGridCellMib.oid = str2;
                    dataGridCellMib.m_bIsReadOnly = true;
                    dataGridCellMib.MibName_CN = MibNameCN;
                    dataGridCellMib.MibName_EN = str1;
                    string str8 = str6;
                    target((CallSite) p4, obj4, str7, dataGridCellMib, str8);
                  }
                }
              }
            }
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__8 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__8 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Func<CallSite, object, bool> target1 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__8.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Func<CallSite, object, bool>> p8 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__8;
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__7 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__7 = CallSite<Func<CallSite, object, int, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Func<CallSite, object, int, object> target2 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__7.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Func<CallSite, object, int, object>> p7 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__7;
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__6 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__6 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Count", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Func<CallSite, object, object> target3 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__6.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Func<CallSite, object, object>> p6 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__6;
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__5 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__5 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Properties", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            object obj5 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__5.Target((CallSite) MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__5, obj1);
            object obj6 = target3((CallSite) p6, obj5);
            object obj7 = target2((CallSite) p7, obj6, 0);
            if (target1((CallSite) p8, obj7))
            {
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__9 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__9 = CallSite<Action<CallSite, ObservableCollection<DyDataGrid_MIBModel>, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "Add", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__9.Target((CallSite) MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__9, observableCollection, obj1);
              ++num1;
            }
          }
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__11 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__11 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          Func<CallSite, object, bool> target4 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__11.Target;
          // ISSUE: reference to a compiler-generated field
          CallSite<Func<CallSite, object, bool>> p11 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__11;
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__10 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__10 = CallSite<Func<CallSite, object, object, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.Constant, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          object obj8 = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__10.Target((CallSite) MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__10, obj1, (object) null);
          if (!target4((CallSite) p11, obj8))
            return;
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__12 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__12 = CallSite<Func<CallSite, object, DyDataGrid_MIBModel>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (DyDataGrid_MIBModel), typeof (MainDataGrid)));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          this.ColumnModel = MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__12.Target((CallSite) MainDataGrid.\u003C\u003Eo__78.\u003C\u003Ep__12, obj1);
          this.DynamicDataGrid.DataContext = (object) observableCollection;
          int num3 = tempColuns.Count > this.DynamicDataGrid.Columns.Count ? this.DynamicDataGrid.Columns.Count : tempColuns.Count;
          for (int i = 0; i < num3; i++)
          {
            GridColumn gridColumn = this.DynamicDataGrid.Columns.ToList<GridColumn>().Find((Predicate<GridColumn>) (p => p.Header.Equals(tempColuns[i].Header)));
            if (gridColumn != null)
              gridColumn.Visible = tempColuns[i].Visible;
          }
          this.DynamicDataGrid.UnselectAll();
        }
      }
      catch (Exception ex)
      {
        LogManager.Log.Error(ex.Message, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 3442, nameof (RefreshDataGridPage));
      }
    }

    public void GetData()
    {
      ObservableCollection<DyDataGrid_MIBModel> observableCollection = new ObservableCollection<DyDataGrid_MIBModel>();
      if (this.LineDataList.Count == 0 || this.mibTable == null)
        return;
      object obj1 = (object) null;
      List<string> stringList = new List<string>();
      this.DynamicDataGrid.DataContext = (object) null;
      int num1 = 0;
      int num2 = 0;
      foreach (string key1 in this.LineDataList.Keys)
      {
        ++num2;
        obj1 = (object) new DyDataGrid_MIBModel();
        string[] strArray = key1.Trim('.').Split('.');
        if (this.IndexCount > 0)
        {
          string str = "";
          for (int index = 0; index < this.IndexCount; ++index)
          {
            string oid = this.mibTable.oid + "." + (object) (index + 1);
            string key2 = SnmpToDatabase.GetMibPrefix() + oid;
            str = str + this.oid_cn[key2] + DataGridUtils.GetShowContentIndex(oid, strArray[index], this.m_gnbIp) + " ";
            if (!stringList.Contains(key2))
              stringList.Add(key2);
          }
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__0 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__0.Target;
          // ISSUE: reference to a compiler-generated field
          CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p0 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__0;
          object obj2 = obj1;
          DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
          dataGridCellMib.m_Content = str;
          dataGridCellMib.oid = SnmpToDatabase.GetMibPrefix() + this.mibTable.oid + ".";
          dataGridCellMib.m_bIsReadOnly = true;
          dataGridCellMib.MibName_CN = LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc");
          dataGridCellMib.MibName_EN = "indexlist";
          dataGridCellMib.Indexs = key1;
          string textValue = LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc");
          target((CallSite) p0, obj2, "indexlist", dataGridCellMib, textValue);
        }
        if (this.mibTable != null)
        {
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__1 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__1 = CallSite<Action<CallSite, object, MibTableInfo>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddTableProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__1.Target((CallSite) MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__1, obj1, this.mibTable);
        }
        foreach (KeyValuePair<string, string> keyValuePair in this.oid_cn)
        {
          string key3 = keyValuePair.Key;
          string MibNameCN = keyValuePair.Value;
          string str1 = this.oid_en[key3];
          string str2 = key3 + key1;
          Dictionary<string, string> lineData = this.LineDataList[key1];
          if (!stringList.Contains(key3))
          {
            MibLeafInfo mibNodeInfoByName = SnmpToDatabase.GetMibNodeInfoByName(str1, this.m_gnbIp);
            if (mibNodeInfoByName != null)
            {
              string str3 = MibNameCN;
              if (!string.IsNullOrEmpty(mibNodeInfoByName.unit))
                str3 = MibNameCN + ":(" + mibNodeInfoByName.unit + ")";
              if (lineData.ContainsKey(str2))
              {
                string utf8 = lineData[str2];
                if (mibNodeInfoByName != null && mibNodeInfoByName.ASNType.Equals("DisplayString"))
                  utf8 = CommString.ConvertPathHexStringToUtf8(utf8);
                LMT.GridCell gridCell = DataGridCellFactory.CreateGridCell(str1, MibNameCN, utf8, str2, this.m_gnbIp, this.IsOnLine, this.IsCfgFile);
                if (gridCell == null)
                {
                  DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
                  dataGridCellMib.oid = str2;
                  dataGridCellMib.MibName_CN = MibNameCN;
                  dataGridCellMib.MibName_EN = str1;
                  dataGridCellMib.m_Content = utf8;
                  dataGridCellMib.m_bIsReadOnly = true;
                  gridCell = (LMT.GridCell) dataGridCellMib;
                }
                // ISSUE: reference to a compiler-generated field
                if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__2 == null)
                {
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__2 = CallSite<Action<CallSite, object, string, LMT.GridCell, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                  {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                  }));
                }
                // ISSUE: reference to a compiler-generated field
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__2.Target((CallSite) MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__2, obj1, str1, gridCell, str3);
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__3 == null)
                {
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__3 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                  {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                  }));
                }
                // ISSUE: reference to a compiler-generated field
                Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__3.Target;
                // ISSUE: reference to a compiler-generated field
                CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p3 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__3;
                object obj3 = obj1;
                string str4 = str1;
                DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
                dataGridCellMib.m_Content = "";
                dataGridCellMib.oid = str2;
                dataGridCellMib.m_bIsReadOnly = true;
                dataGridCellMib.MibName_CN = MibNameCN;
                dataGridCellMib.MibName_EN = str1;
                string str5 = str3;
                target((CallSite) p3, obj3, str4, dataGridCellMib, str5);
              }
            }
          }
        }
        // ISSUE: reference to a compiler-generated field
        if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__7 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__7 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        Func<CallSite, object, bool> target1 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__7.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, bool>> p7 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__7;
        // ISSUE: reference to a compiler-generated field
        if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__6 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__6 = CallSite<Func<CallSite, object, int, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        Func<CallSite, object, int, object> target2 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__6.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, int, object>> p6 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__6;
        // ISSUE: reference to a compiler-generated field
        if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__5 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__5 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Count", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        Func<CallSite, object, object> target3 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__5.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, object>> p5 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__5;
        // ISSUE: reference to a compiler-generated field
        if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__4 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__4 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Properties", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        object obj4 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__4.Target((CallSite) MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__4, obj1);
        object obj5 = target3((CallSite) p5, obj4);
        object obj6 = target2((CallSite) p6, obj5, 0);
        if (target1((CallSite) p7, obj6))
        {
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__8 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__8 = CallSite<Action<CallSite, ObservableCollection<DyDataGrid_MIBModel>, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "Add", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__8.Target((CallSite) MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__8, observableCollection, obj1);
          ++num1;
        }
      }
      // ISSUE: reference to a compiler-generated field
      if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__10 == null)
      {
        // ISSUE: reference to a compiler-generated field
        MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__10 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      Func<CallSite, object, bool> target4 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__10.Target;
      // ISSUE: reference to a compiler-generated field
      CallSite<Func<CallSite, object, bool>> p10 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__10;
      // ISSUE: reference to a compiler-generated field
      if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__9 == null)
      {
        // ISSUE: reference to a compiler-generated field
        MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__9 = CallSite<Func<CallSite, object, object, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.Constant, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      object obj7 = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__9.Target((CallSite) MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__9, obj1, (object) null);
      if (!target4((CallSite) p10, obj7))
        return;
      // ISSUE: reference to a compiler-generated field
      if (MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__11 == null)
      {
        // ISSUE: reference to a compiler-generated field
        MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__11 = CallSite<Func<CallSite, object, DyDataGrid_MIBModel>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (DyDataGrid_MIBModel), typeof (MainDataGrid)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      this.ColumnModel = MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__11.Target((CallSite) MainDataGrid.\u003C\u003Eo__79.\u003C\u003Ep__11, obj1);
      this.DynamicDataGrid.DataContext = (object) observableCollection;
    }

    private void btnGo_Click(object sender, System.Windows.Input.KeyEventArgs e)
    {
      int turningPageNum = this.PageInfo.TurningPageNum;
      int totalPage = this.PageInfo.TotalPage;
      if (turningPageNum == 0 && CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_PageInvalid"), messageBoxImage: CustomMessageBoxIcon.Warning) == CustomMessageBoxResult.OK || turningPageNum > totalPage && CustomMessageBox.Show(string.Format("{0}：{1},{2}", (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_MaxPage"), (object) totalPage, (object) LanguageServices.Current.GetTextValue("BaseInfo_Msg_ReInput")), messageBoxImage: CustomMessageBoxIcon.Warning) == CustomMessageBoxResult.OK)
        return;
      if (turningPageNum >= 1 && turningPageNum <= totalPage)
        this.RefreshDataGrid(turningPageNum);
      this.PageInfo.CurrentPage = turningPageNum;
    }

    private void btnUp_Click(object sender, RoutedEventArgs e)
    {
      if (this.totalPageNum == 1 || this.totalPageNum == 0 || this.PageInfo.CurrentPage == 1 && CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_FirstPage"), messageBoxImage: CustomMessageBoxIcon.Warning) == CustomMessageBoxResult.OK)
        return;
      int currentPage = this.PageInfo.CurrentPage;
      if (currentPage > 1)
        this.RefreshDataGrid(currentPage - 1);
      --this.PageInfo.CurrentPage;
    }

    private void btnNext_Click(object sender, RoutedEventArgs e)
    {
      if (this.totalPageNum == 1 || this.totalPageNum == 0 || this.totalPageNum - this.PageInfo.CurrentPage == 0 && CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_LastPage"), messageBoxImage: CustomMessageBoxIcon.Warning) == CustomMessageBoxResult.OK)
        return;
      int totalPage = this.PageInfo.TotalPage;
      int currentPage = this.PageInfo.CurrentPage;
      if (currentPage < totalPage)
        this.RefreshDataGrid(currentPage + 1);
      ++this.PageInfo.CurrentPage;
    }

    private void tbkShowLineNum_LostFocus(object sender, RoutedEventArgs e)
    {
      if (this.perPageLineNum == this.PageInfo.PerPageNum)
        return;
      this.perPageLineNum = this.PageInfo.PerPageNum;
      this.SetPageInfo();
      this.RefreshDataGrid(this.PageInfo.CurrentPage);
    }

    private void DynamicDataGrid_DragEnter(object sender, System.Windows.DragEventArgs e)
    {
      if (!this.IsUserOperMode)
        return;
      List<string> stringList = new List<string>();
      IEnumerable data = (IEnumerable) (e.Data.GetData(System.Windows.DataFormats.FileDrop) as Array);
      if (data == null)
        return;
      this.listCmdMibInfo?.Clear();
      this.listCmdMibInfo = Database.GetInstance().GetCmdsInfoByEntryName(this.mibTable.nameMib, this.m_gnbIp);
      if (this.listCmdMibInfo == null)
        return;
      if (!this.listCmdMibInfo.Where<CmdMibInfo>((System.Func<CmdMibInfo, bool>) (p => p.m_cmdType.Equals("1"))).Any<CmdMibInfo>())
      {
        int num1 = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_NoSupportImport"));
      }
      else
      {
        foreach (object obj in data)
          stringList.Add(obj.ToString());
        if (stringList.Count == 0)
        {
          int num2 = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_NoFindTable"));
        }
        else if (Path.GetExtension(stringList[0]) != ".xls" && Path.GetExtension(stringList[0].ToString()) != ".xlsx")
        {
          int num3 = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_ExcelTypeFail"));
        }
        else
          this.MibTableImportProcess(stringList[0], true);
      }
    }

    public void initalCmdList()
    {
      if (this.listCmdMibInfo != null)
        return;
      this.listCmdMibInfo = Database.GetInstance().GetCmdsInfoByEntryName(this.mibTable.nameMib, this.m_gnbIp);
    }

    private void EditHeader(object sender, RoutedEventArgs e)
    {
      e.Handled = true;
      if (!this.IsUserOperMode)
        return;
      this.ContextMenu = (System.Windows.Controls.ContextMenu) null;
      this.popEnumList.IsOpen = true;
    }

    private void IndexSort(object sender, RoutedEventArgs e)
    {
      if (!this.IsUserOperMode)
        return;
      if (this.isEdit)
        e.Handled = true;
      else if (!((e.Source as GridColumnHeader).DataContext is GridColumn dataContext))
      {
        e.Handled = true;
      }
      else
      {
        if (!dataContext.Header.Equals((object) LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc")) || this.mibTable == null || this.LineDataList.Count <= 1)
          return;
        this.LineDataList = DataGridUtils.SortMibDataToIndex(this.LineDataList, this.mibTable.indexNum, !DataGridUtils.IsAscend(this.LineDataList, this.mibTable.indexNum));
        this.RefreshDataGridPage(this.PageInfo.CurrentPage);
        e.Handled = true;
      }
    }

    private void BtnSaveFile_Click(object sender, RoutedEventArgs e)
    {
      string strErr = "";
      if (CfgLogicMid.GetInstance().SaveCfgFile(this.cfgUUID, ref strErr, this.cfgUUID))
      {
        this.ShowLogInfo(this.cfgUUID + LanguageServices.Current.GetTextValue("CfgFile_Message_SaveSuc"));
      }
      else
      {
        int num = (int) CustomMessageBox.Show(this.cfgUUID + LanguageServices.Current.GetTextValue("CfgCompare_Message_SaveFail"));
      }
    }

    private void OfflineMenuShow(MibTableInfo table)
    {
      this.isMultiAdd = false;
      this.isMultiQuery = false;
      string nameCh = table.nameCh;
      System.Windows.Controls.ContextMenu contextMenu = new System.Windows.Controls.ContextMenu();
      System.Windows.Controls.MenuItem newItem1 = this.AddMenuItem(eMenuType.Add);
      System.Windows.Controls.MenuItem newItem2 = this.AddMenuItem(eMenuType.mutiAdd);
      System.Windows.Controls.MenuItem newItem3 = this.AddMenuItem(eMenuType.Modify);
      System.Windows.Controls.MenuItem newItem4 = this.AddMenuItem(eMenuType.Delete);
      System.Windows.Controls.MenuItem newItem5 = this.AddMenuItem(eMenuType.AllDelete);
      System.Windows.Controls.MenuItem newItem6 = this.AddMenuItem(eMenuType.Export);
      System.Windows.Controls.MenuItem newItem7 = this.AddMenuItem(eMenuType.Import);
      if (this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("1"))) != null)
      {
        newItem1.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Add") + " " + nameCh);
        newItem1.IsEnabled = true;
        newItem1.Click += new RoutedEventHandler(this.MenuAddItem_Click);
        contextMenu.Items.Add((object) newItem1);
        newItem2.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_MultiAdd") + " " + nameCh);
        newItem2.IsEnabled = true;
        newItem2.Click += new RoutedEventHandler(this.MenuAddItem_Click);
        contextMenu.Items.Add((object) newItem2);
      }
      if (this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("3"))) != null)
      {
        newItem3.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Set") + " " + nameCh);
        newItem3.IsEnabled = true;
        newItem3.Click += new RoutedEventHandler(this.MenuCfgModifyItem_Click);
        contextMenu.Items.Add((object) newItem3);
      }
      if (this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("2"))) != null)
      {
        newItem4.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Del") + " " + nameCh);
        newItem4.Click += new RoutedEventHandler(this.MenuCfgDeleteItem_Click);
        newItem4.IsEnabled = true;
        contextMenu.Items.Add((object) newItem4);
        newItem5.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_DelAll") + " " + nameCh);
        newItem5.Click += new RoutedEventHandler(this.MenuItemAllDelete_Click);
        newItem5.IsEnabled = true;
        contextMenu.Items.Add((object) newItem5);
      }
      if (this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("1"))) != null)
      {
        newItem7.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Inport") + " " + nameCh);
        newItem7.IsEnabled = true;
        newItem7.Click += new RoutedEventHandler(this.MenuItemImport_Click);
        contextMenu.Items.Add((object) newItem7);
      }
      newItem6.Header = (object) (LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Export") + " " + nameCh);
      newItem6.Click += new RoutedEventHandler(this.MenuItemExport_Click);
      newItem6.IsEnabled = true;
      contextMenu.Items.Add((object) newItem6);
      if (this.IsPatchFileMode)
      {
        System.Windows.Controls.MenuItem newItem8 = this.AddMenuItem(eMenuType.Export);
        newItem8.Header = (object) (LanguageServices.Current.GetTextValue("CfgFile_Menu_ConfigePatchFile") + " " + nameCh);
        newItem8.Click += new RoutedEventHandler(this.MenuItemPatch_Click);
        newItem8.IsEnabled = true;
        contextMenu.Items.Add((object) newItem8);
      }
      this.ContextMenu = contextMenu;
    }

    private void MenuItemPatch_Click(object sender, RoutedEventArgs e)
    {
      if (!(sender is System.Windows.Controls.MenuItem))
        return;
      CfgPatchFileModeView patchFileModeView = new CfgPatchFileModeView();
      CfgPatchFileModeVM cfgPatchFileModeVm = new CfgPatchFileModeVM();
      cfgPatchFileModeVm.UpdateInstAndLeafShow(this);
      patchFileModeView.DataContext = (object) cfgPatchFileModeVm;
      patchFileModeView.ShowDialog();
    }

    private void MenuCfgModifyItem_Click(object sender, RoutedEventArgs e)
    {
      if (!(sender is System.Windows.Controls.MenuItem))
        return;
      if (this.m_ColumnModel.TableProperty is MibTableInfo tableProperty)
      {
        int indexNum = tableProperty.indexNum;
        if (this.m_selectItems.Count == 0 && indexNum > 0)
        {
          int num = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_SeleteModifyData"));
          return;
        }
      }
      BasicInfoParaSetWin basicInfoParaSetWin = new BasicInfoParaSetWin(this);
      basicInfoParaSetWin.InitParaInfo((CmdMibInfo) null, this.m_ColumnModel.TableProperty as MibTableInfo, UICmdOperatorType.Modify, this.isMultiAdd, this.IsOnLine, this.m_selectItems, this.listCmdMibInfo);
      basicInfoParaSetWin.ShowDialog();
    }

    private void MenuCfgDeleteItem_Click(object sender, RoutedEventArgs e)
    {
      if (!(sender is System.Windows.Controls.MenuItem))
        return;
      CmdMibInfo info = this.listCmdMibInfo.Find((Predicate<CmdMibInfo>) (p => p.m_cmdType.Equals("2")));
      if (info == null || !(this.m_ColumnModel.TableProperty is MibTableInfo tableProperty))
        return;
      int indexNum = tableProperty.indexNum;
      if (this.m_selectItems.Count == 0 && indexNum > 0)
      {
        int num = (int) CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_SeleteDeleteData"));
      }
      else
      {
        MibLeafInfo rowStatusInfo = DataGridUtils.GetRowStatusInfo(info, this.m_gnbIp);
        if (rowStatusInfo == null || CustomMessageBoxResult.Yes != CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_DelItem"), CustomMessageBoxButton.YesNo, CustomMessageBoxIcon.Question))
          return;
        string strIndex = (string) null;
        foreach (DyDataGrid_MIBModel selectItem in this.m_selectItems)
        {
          DataGridUtils.GetMibIndex(selectItem.Properties, indexNum, out strIndex);
          string str = SnmpToDatabase.GetMibPrefix() + rowStatusInfo.childOid + strIndex;
          string err = "";
          if (!CfgLogicMid.GetInstance().DelTableSingleInst(this.cfgUUID, tableProperty.nameMib, strIndex, out err))
          {
            ShowLogHelper.Show(LanguageServices.Current.GetTextValue("CellPlan_Msg_DeleteFail"), this.m_gnbIp);
            break;
          }
          this.RefreshDataGrid(new Dictionary<string, string>()
          {
            {
              str,
              "6"
            }
          }, strIndex, indexNum, (UICmdOperatorType) int.Parse(info.m_cmdType));
          if (this.LineDataList.ContainsKey(strIndex))
          {
            this.LineDataList.Remove(strIndex);
            this.PageInfo.TotalRecords = this.LineDataList.Count;
          }
        }
      }
    }

    private void MenuItemAllDelete_Click(object sender, RoutedEventArgs e)
    {
      if (!(sender is System.Windows.Controls.MenuItem) || CustomMessageBoxResult.Yes != CustomMessageBox.Show(LanguageServices.Current.GetTextValue("BaseInfo_Msg_DeleteAllInst"), CustomMessageBoxButton.YesNo, CustomMessageBoxIcon.Question))
        return;
      MibTableInfo tableProperty = this.m_ColumnModel.TableProperty as MibTableInfo;
      if (!CfgLogicMid.GetInstance().DelTableAllInst(this.cfgUUID, tableProperty?.nameMib, out string _))
        return;
      this.LineDataList.Clear();
      this.DynamicDataGrid.DataContext = (object) null;
      this.ShowLogInfo(string.Format(LanguageServices.Current.GetTextValue("BaseInfo_Log_121"), (object) this.mibTable.nameMib));
      this.PageInfo.TotalRecords = this.LineDataList.Count;
    }

    private void CfgFileShowLog(string strIndex, UICmdOperatorType operType)
    {
      if (this.IsOnLine)
        return;
      string msg = "";
      string str = this.mibTable.nameMib + " " + LanguageServices.Current.GetTextValue("BaseInfo_Log_129_1") + " " + strIndex + " ";
      switch (operType)
      {
        case UICmdOperatorType.Add:
          msg = string.Format(LanguageServices.Current.GetTextValue("BaseInfo_Log_33"), (object) str);
          break;
        case UICmdOperatorType.Del:
          msg = string.Format(LanguageServices.Current.GetTextValue("BaseInfo_Log_34"), (object) str);
          break;
      }
      ShowLogHelper.Show(msg, this.cfgUUID);
    }

    private void CfgFileModifyShowLog(
      string mibNameCh,
      string mibNameEn,
      string oldval,
      string newval,
      string index,
      string err = null)
    {
      if (this.IsOnLine)
        return;
      string str = mibNameCh + "(" + mibNameEn + ") " + LanguageServices.Current.GetTextValue("BaseInfo_Log_129_1") + " " + index;
      string msg;
      if (string.IsNullOrWhiteSpace(err))
        msg = string.Format(LanguageServices.Current.GetTextValue("BaseInfo_Log_35"), (object) str, (object) oldval, (object) newval);
      else
        msg = str + "," + LanguageServices.Current.GetTextValue("BaseInfo_Log_36") + " " + err;
      ShowLogHelper.Show(msg, this.cfgUUID);
    }

    private System.Windows.Controls.MenuItem AddMenuItem(eMenuType type)
    {
      System.Windows.Controls.MenuItem menuItem = new System.Windows.Controls.MenuItem();
      switch (type)
      {
        case eMenuType.Add:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibAdd.png", UriKind.RelativeOrAbsolute))
          };
          break;
        case eMenuType.mutiAdd:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibMutiAdd.png", UriKind.RelativeOrAbsolute))
          };
          break;
        case eMenuType.Delete:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibDelete.png", UriKind.RelativeOrAbsolute))
          };
          break;
        case eMenuType.AllDelete:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibAllDelete.png", UriKind.RelativeOrAbsolute))
          };
          break;
        case eMenuType.Modify:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibModify.png", UriKind.RelativeOrAbsolute))
          };
          break;
        case eMenuType.Query:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibQuery.png", UriKind.RelativeOrAbsolute))
          };
          break;
        case eMenuType.mutiQuery:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibMutiQuery.png", UriKind.RelativeOrAbsolute))
          };
          break;
        case eMenuType.Import:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibImport.png", UriKind.RelativeOrAbsolute))
          };
          break;
        case eMenuType.Export:
          menuItem.Icon = (object) new Image()
          {
            Source = (ImageSource) new BitmapImage(new Uri("/Resources/MibExport.png", UriKind.RelativeOrAbsolute))
          };
          break;
      }
      return menuItem;
    }

    public void ShowLogInfo(string info)
    {
      if (this.IsOnLine)
        ShowLogHelper.Show(info, this.m_gnbIp);
      else
        ShowLogHelper.Show(info, this.cfgUUID);
    }

    private void BtnAllSel_Click(object sender, RoutedEventArgs e) => this.DynamicDataGrid.SelectAll();

    public void ResetDataGridInfo()
    {
      if (this.DynamicTableView.IsEditing)
        this.DynamicTableView.HideEditor();
      this.DynamicDataGrid.Columns.Clear();
      this.DynamicDataGrid.DataContext = (object) null;
      this.DataGridMibName.Text = "";
      this.DataGridMibEngName.Text = "";
      this.ColumnModel = (DyDataGrid_MIBModel) null;
      this.PageInfo.CurrentPage = 0;
      this.PageInfo.TotalPage = 0;
      this.PageInfo.TurningPageNum = 0;
      this.PageInfo.TotalRecords = 0;
      this.DataGridMibName.Text = "";
      this.DataGridMibEngName.Text = "";
      this.FullMibName.Text = "";
      this.FullMibName.ToolTip = (object) null;
      this.ContextMenu = (System.Windows.Controls.ContextMenu) null;
      this.LineDataList.Clear();
      this.mibTable = (MibTableInfo) null;
    }

    public void InitMainDataGridInfo(NodeBControlPage page)
    {
      this.m_gnbIp = page.MainTabVM.GnbIp;
      this.IsOnLine = page.MainTabVM.IsOnLine;
      this.IsCfgFile = page.MainTabVM.IsCfgFile;
      this.cfgUUID = page.MainTabVM.TabName;
      this.IsPatchFileMode = page.IsPatchFileMode;
    }

    public void SetSaveAndSelVisible()
    {
      this.BtnMakePatchFile.Visibility = Visibility.Collapsed;
      if (this.IsOnLine)
      {
        this.BtnSaveFile.Visibility = Visibility.Collapsed;
      }
      else
      {
        if (this.IsCfgFile)
        {
          this.BtnSaveFile.Visibility = Visibility.Visible;
          this.BtnAllSel.Visibility = Visibility.Visible;
        }
        else
        {
          this.BtnSaveFile.Visibility = Visibility.Collapsed;
          this.BtnAllSel.Visibility = Visibility.Collapsed;
        }
        if (!this.IsPatchFileMode)
          return;
        this.BtnMakePatchFile.Visibility = Visibility.Visible;
      }
    }

    public void InitMibShowName(
      ObservableCollection<ObjNodeModel> listObjNode,
      MibTableInfo mibTable)
    {
      if (listObjNode == null || mibTable == null)
        return;
      this.DataGridMibName.Text = mibTable.nameCh;
      this.DataGridMibEngName.Text = mibTable.nameMib;
      this.FullMibName.Text = DataGridUtils.GetAllParentPath(listObjNode, mibTable);
      this.FullMibName.ToolTip = (object) this.FullMibName.Text;
    }

    public void RefreshDataGrid(int page)
    {
      if (this.IsUserOperMode)
        this.RefreshDataGridPage(page);
      else
        this.CompareModeRefreshDataGridPage(page);
      this.DynamicDataGrid.FilterString = "";
    }

    private void BtnShowModel_Click(object sender, RoutedEventArgs e)
    {
      if (this.DynamicTableView.IsEditing)
        this.DynamicTableView.HideEditor();
      this.IsUserOperMode = !this.IsUserOperMode;
      this.DynamicDataGrid.Columns.Clear();
      this.ColumnModel = (DyDataGrid_MIBModel) null;
      if (this.IsUserOperMode)
        this.BtnShowModel.Content = (object) LanguageServices.Current.GetTextValue("BaseInfo_Page_CmpMode");
      else
        this.BtnShowModel.Content = (object) LanguageServices.Current.GetTextValue("BaseInfo_Page_MngMode");
      this.RefreshDataGrid(this.PageInfo.CurrentPage);
    }

    public void UserOperModeNullTableProcess()
    {
      if (this.mibTable == null || this.oid_cn == null || this.oid_en == null)
        return;
      object obj1 = (object) new DyDataGrid_MIBModel();
      // ISSUE: reference to a compiler-generated field
      if (MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, MibTableInfo>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddTableProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__0.Target((CallSite) MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__0, obj1, this.mibTable);
      Func<List<MibLeafInfo>, int, MibLeafInfo> func = (Func<List<MibLeafInfo>, int, MibLeafInfo>) ((leafList, index) => leafList.FirstOrDefault<MibLeafInfo>((System.Func<MibLeafInfo, bool>) (item => item.childNo == index)));
      List<MibLeafInfo> childList = this.mibTable.childList;
      for (int index = 1; index <= childList.Count; ++index)
      {
        MibLeafInfo leaf = func(childList, index);
        if (leaf != null && !string.IsNullOrEmpty(leaf.childNameMib) && !string.IsNullOrEmpty(leaf.childNameCh) && leaf.IsValidMib() && !leaf.IsRowStatus() && (this.IsOnLine || !leaf.ICFWriteAble.Equals("×")))
        {
          if (leaf.IsIndex == "True" && leaf.childNo == 1)
          {
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__1 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__1 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__1.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p1 = MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__1;
            object obj2 = obj1;
            DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
            dataGridCellMib.m_Content = (string) null;
            dataGridCellMib.oid = (string) null;
            dataGridCellMib.m_bIsReadOnly = SnmpToDatabase.GetReadAndWriteStatus(leaf.childNameMib, this.m_gnbIp, this.IsOnLine, this.IsCfgFile);
            dataGridCellMib.MibName_CN = LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc");
            dataGridCellMib.MibName_EN = "indexlist";
            string textValue = LanguageServices.Current.GetTextValue("BaseInfo_DataGrid_Desc");
            target((CallSite) p1, obj2, "indexlist", dataGridCellMib, textValue);
          }
          if (leaf.IsIndex == "False" && this.oid_en.Values.ToList<string>().Find((Predicate<string>) (p => p.Equals(leaf.childNameMib))) != null)
          {
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__2 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__2 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__2.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p2 = MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__2;
            object obj3 = obj1;
            string childNameMib = leaf.childNameMib;
            DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
            dataGridCellMib.m_Content = (string) null;
            dataGridCellMib.oid = (string) null;
            dataGridCellMib.m_bIsReadOnly = SnmpToDatabase.GetReadAndWriteStatus(leaf.childNameMib, this.m_gnbIp, this.IsOnLine, this.IsCfgFile);
            dataGridCellMib.MibName_CN = leaf.childNameCh;
            dataGridCellMib.MibName_EN = leaf.childNameMib;
            string childNameCh = leaf.childNameCh;
            target((CallSite) p2, obj3, childNameMib, dataGridCellMib, childNameCh);
          }
        }
      }
      // ISSUE: reference to a compiler-generated field
      if (MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__3 == null)
      {
        // ISSUE: reference to a compiler-generated field
        MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, DyDataGrid_MIBModel>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (DyDataGrid_MIBModel), typeof (MainDataGrid)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      this.ColumnModel = MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__3.Target((CallSite) MainDataGrid.\u003C\u003Eo__105.\u003C\u003Ep__3, obj1);
      this.DynamicDataGrid.DataContext = (object) null;
    }

    public void CompareModeNullTableProcess()
    {
      try
      {
        if (this.mibTable == null || this.oid_cn == null || this.oid_en == null)
          return;
        this.DynamicDataGrid.DataContext = (object) null;
        int num = 0;
        ObservableCollection<DyDataGrid_MIBModel> observableCollection = new ObservableCollection<DyDataGrid_MIBModel>();
        object obj1 = (object) null;
        foreach (KeyValuePair<string, string> keyValuePair in this.oid_cn)
        {
          string key = keyValuePair.Key;
          string str = keyValuePair.Value;
          string mibName = this.oid_en[key];
          obj1 = (object) new DyDataGrid_MIBModel();
          MibLeafInfo mibNodeInfoByName = SnmpToDatabase.GetMibNodeInfoByName(mibName, this.m_gnbIp);
          if (mibNodeInfoByName == null)
            return;
          if (!mibNodeInfoByName.IsIndex.Equals("True") && (this.IsOnLine || !mibNodeInfoByName.ICFWriteAble.Equals("×")) && mibNodeInfoByName.IsValidMib() && !mibNodeInfoByName.IsRowStatus())
          {
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__0 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Action<CallSite, object, string, DataGrid_Cell_MIB, string> target1 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__0.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p0 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__0;
            object obj2 = obj1;
            string textValue1 = LanguageServices.Current.GetTextValue("CellPlan_Msg_NodeName");
            DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
            dataGridCellMib.m_Content = str;
            dataGridCellMib.oid = "";
            dataGridCellMib.m_bIsReadOnly = true;
            dataGridCellMib.MibName_CN = str;
            dataGridCellMib.MibName_EN = mibName;
            dataGridCellMib.Indexs = "";
            string textValue2 = LanguageServices.Current.GetTextValue("CellPlan_Msg_NodeName");
            target1((CallSite) p0, obj2, textValue1, dataGridCellMib, textValue2);
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__4 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__4 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Func<CallSite, object, bool> target2 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__4.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Func<CallSite, object, bool>> p4 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__4;
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__3 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, int, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Func<CallSite, object, int, object> target3 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__3.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Func<CallSite, object, int, object>> p3 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__3;
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__2 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__2 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Count", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            Func<CallSite, object, object> target4 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__2.Target;
            // ISSUE: reference to a compiler-generated field
            CallSite<Func<CallSite, object, object>> p2 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__2;
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__1 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__1 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Properties", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
              {
                CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
              }));
            }
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            object obj3 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__1.Target((CallSite) MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__1, obj1);
            object obj4 = target4((CallSite) p2, obj3);
            object obj5 = target3((CallSite) p3, obj4, 0);
            if (target2((CallSite) p4, obj5))
            {
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__5 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__5 = CallSite<Action<CallSite, ObservableCollection<DyDataGrid_MIBModel>, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "Add", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__5.Target((CallSite) MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__5, observableCollection, obj1);
              ++num;
            }
          }
        }
        // ISSUE: reference to a compiler-generated field
        if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__7 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__7 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        Func<CallSite, object, bool> target = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__7.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, bool>> p7 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__7;
        // ISSUE: reference to a compiler-generated field
        if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__6 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__6 = CallSite<Func<CallSite, object, object, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.Constant, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        object obj6 = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__6.Target((CallSite) MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__6, obj1, (object) null);
        if (!target((CallSite) p7, obj6))
          return;
        // ISSUE: reference to a compiler-generated field
        if (MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__8 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__8 = CallSite<Func<CallSite, object, DyDataGrid_MIBModel>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (DyDataGrid_MIBModel), typeof (MainDataGrid)));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        this.ColumnModel = MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__8.Target((CallSite) MainDataGrid.\u003C\u003Eo__106.\u003C\u003Ep__8, obj1);
        this.DynamicDataGrid.DataContext = (object) observableCollection;
      }
      catch (Exception ex)
      {
        LogManager.Log.Error(ex.Message, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 4406, nameof (CompareModeNullTableProcess));
      }
    }

    private void CompareModeRefreshDataGridPage(int curentPage)
    {
      try
      {
        if (this.LineDataList.Count == 0 || this.mibTable == null)
        {
          this.CompareModeNullTableProcess();
        }
        else
        {
          if (this.oid_cn == null || this.oid_en == null)
            return;
          List<string> stringList = new List<string>();
          this.PageInfo.CurrentPage = curentPage;
          this.DynamicDataGrid.DataContext = (object) null;
          int num1 = 0;
          ObservableCollection<DyDataGrid_MIBModel> observableCollection = new ObservableCollection<DyDataGrid_MIBModel>();
          object obj1 = (object) null;
          foreach (KeyValuePair<string, string> keyValuePair in this.oid_cn)
          {
            int num2 = 0;
            string key1 = keyValuePair.Key;
            string MibNameCN = keyValuePair.Value;
            string str1 = this.oid_en[key1];
            obj1 = (object) new DyDataGrid_MIBModel();
            MibLeafInfo mibNodeInfoByName1 = SnmpToDatabase.GetMibNodeInfoByName(str1, this.m_gnbIp);
            if (mibNodeInfoByName1 == null)
              return;
            if (!mibNodeInfoByName1.IsIndex.Equals("True"))
            {
              string str2 = MibNameCN;
              if (!string.IsNullOrEmpty(mibNodeInfoByName1.unit))
                str2 = MibNameCN + ":(" + mibNodeInfoByName1.unit + ")";
              int num3 = 0;
              foreach (string key2 in this.LineDataList.Keys)
              {
                ++num2;
                if (curentPage == 1)
                {
                  if (curentPage * this.perPageLineNum < num2)
                    break;
                }
                else if (num2 > (curentPage - 1) * this.perPageLineNum && num2 <= curentPage * this.perPageLineNum)
                {
                  if (num2 > curentPage * this.perPageLineNum)
                    break;
                }
                else
                  continue;
                string str3 = key1 + key2;
                string[] strArray = key2.Trim('.').Split('.');
                string str4 = "";
                string str5 = "";
                if (this.IndexCount > 0)
                {
                  for (int index = 0; index < this.IndexCount; ++index)
                  {
                    string oid = this.mibTable.oid + "." + (object) (index + 1);
                    string key3 = SnmpToDatabase.GetMibPrefix() + oid;
                    string showContentIndex = DataGridUtils.GetShowContentIndex(oid, strArray[index], this.m_gnbIp);
                    str5 = str5 + showContentIndex + "_";
                    str4 = str4 + this.oid_cn[key3] + showContentIndex;
                    if (!stringList.Contains(key3))
                      stringList.Add(key3);
                  }
                  str5 = str5.Remove(str5.Length - 1, 1);
                }
                if (str4.Contains("[") || str4.Contains("]"))
                {
                  this.ShowLogInfo(LanguageServices.Current.GetTextValue("BaseInfo_NoShowCompareMode"));
                  return;
                }
                Dictionary<string, string> lineData = this.LineDataList[key2];
                if (!stringList.Contains(key1))
                {
                  if (this.mibTable != null)
                  {
                    // ISSUE: reference to a compiler-generated field
                    if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__0 == null)
                    {
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, MibTableInfo>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddTableProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                      {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                      }));
                    }
                    // ISSUE: reference to a compiler-generated field
                    // ISSUE: reference to a compiler-generated field
                    MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__0.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__0, obj1, this.mibTable);
                  }
                  if (num3 == 0)
                  {
                    // ISSUE: reference to a compiler-generated field
                    if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__1 == null)
                    {
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__1 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                      {
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                        CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                      }));
                    }
                    // ISSUE: reference to a compiler-generated field
                    Action<CallSite, object, string, DataGrid_Cell_MIB, string> target = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__1.Target;
                    // ISSUE: reference to a compiler-generated field
                    CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>> p1 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__1;
                    object obj2 = obj1;
                    string textValue1 = LanguageServices.Current.GetTextValue("CellPlan_Msg_NodeName");
                    DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
                    dataGridCellMib.m_Content = str2;
                    dataGridCellMib.oid = "";
                    dataGridCellMib.m_bIsReadOnly = true;
                    dataGridCellMib.MibName_CN = MibNameCN;
                    dataGridCellMib.MibName_EN = str1;
                    dataGridCellMib.Indexs = "";
                    dataGridCellMib.Id = num1.ToString() + "_" + num3.ToString();
                    string textValue2 = LanguageServices.Current.GetTextValue("CellPlan_Msg_NodeName");
                    target((CallSite) p1, obj2, textValue1, dataGridCellMib, textValue2);
                  }
                  if (lineData.ContainsKey(str3))
                  {
                    string utf8 = lineData[str3];
                    MibLeafInfo mibNodeInfoByName2 = SnmpToDatabase.GetMibNodeInfoByName(str1, this.m_gnbIp);
                    if (mibNodeInfoByName2 != null && mibNodeInfoByName2.ASNType.Equals("DisplayString"))
                      utf8 = CommString.ConvertPathHexStringToUtf8(lineData[str3]);
                    LMT.GridCell gridCell = DataGridCellFactory.CreateGridCell(str1, MibNameCN, utf8, str3, this.m_gnbIp, this.IsOnLine, this.IsCfgFile);
                    gridCell.Id = num1.ToString() + "_" + num3.ToString();
                    if (gridCell == null)
                    {
                      DataGrid_Cell_MIB dataGridCellMib = new DataGrid_Cell_MIB();
                      dataGridCellMib.oid = str3;
                      dataGridCellMib.MibName_CN = MibNameCN;
                      dataGridCellMib.MibName_EN = str1;
                      dataGridCellMib.m_Content = lineData[str3];
                      dataGridCellMib.m_bIsReadOnly = true;
                      dataGridCellMib.Id = num1.ToString() + "_" + num3.ToString();
                      gridCell = (LMT.GridCell) dataGridCellMib;
                    }
                    if (this.IndexCount == 0)
                    {
                      // ISSUE: reference to a compiler-generated field
                      if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__2 == null)
                      {
                        // ISSUE: reference to a compiler-generated field
                        MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__2 = CallSite<Action<CallSite, object, string, LMT.GridCell, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                        {
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                        }));
                      }
                      // ISSUE: reference to a compiler-generated field
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__2.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__2, obj1, LanguageServices.Current.GetTextValue("CellPlan_Msg_Value"), gridCell, LanguageServices.Current.GetTextValue("CellPlan_Msg_Value"));
                    }
                    else if (this.IndexCount > 0)
                    {
                      // ISSUE: reference to a compiler-generated field
                      if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__3 == null)
                      {
                        // ISSUE: reference to a compiler-generated field
                        MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__3 = CallSite<Action<CallSite, object, string, LMT.GridCell, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                        {
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                        }));
                      }
                      // ISSUE: reference to a compiler-generated field
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__3.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__3, obj1, str5, gridCell, str4);
                    }
                  }
                  else
                  {
                    if (!this.IsCfgFile && !this.IsOnLine)
                    {
                      obj1 = (object) null;
                      break;
                    }
                    DataGrid_Cell_MIB dataGridCellMib1 = new DataGrid_Cell_MIB();
                    dataGridCellMib1.m_Content = "";
                    dataGridCellMib1.oid = "";
                    dataGridCellMib1.MibName_CN = MibNameCN;
                    dataGridCellMib1.MibName_EN = str1;
                    dataGridCellMib1.m_bIsReadOnly = true;
                    dataGridCellMib1.Indexs = "";
                    dataGridCellMib1.Id = num1.ToString() + "_" + num3.ToString();
                    DataGrid_Cell_MIB dataGridCellMib2 = dataGridCellMib1;
                    if (this.IndexCount == 0)
                    {
                      // ISSUE: reference to a compiler-generated field
                      if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__4 == null)
                      {
                        // ISSUE: reference to a compiler-generated field
                        MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__4 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                        {
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                        }));
                      }
                      // ISSUE: reference to a compiler-generated field
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__4.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__4, obj1, "value", dataGridCellMib2, LanguageServices.Current.GetTextValue("CellPlan_Msg_Value"));
                    }
                    else if (this.IndexCount > 0)
                    {
                      // ISSUE: reference to a compiler-generated field
                      if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__5 == null)
                      {
                        // ISSUE: reference to a compiler-generated field
                        MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__5 = CallSite<Action<CallSite, object, string, DataGrid_Cell_MIB, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "AddProperty", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[4]
                        {
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
                        }));
                      }
                      // ISSUE: reference to a compiler-generated field
                      // ISSUE: reference to a compiler-generated field
                      MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__5.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__5, obj1, str5, dataGridCellMib2, str4);
                    }
                  }
                  ++num3;
                }
              }
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__12 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__12 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              Func<CallSite, object, bool> target1 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__12.Target;
              // ISSUE: reference to a compiler-generated field
              CallSite<Func<CallSite, object, bool>> p12 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__12;
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__6 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__6 = CallSite<Func<CallSite, object, object, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.Constant, (string) null)
                }));
              }
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              object obj3 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__6.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__6, obj1, (object) null);
              // ISSUE: reference to a compiler-generated field
              if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__11 == null)
              {
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__11 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsFalse, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
                {
                  CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                }));
              }
              object obj4;
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              if (!MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__11.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__11, obj3))
              {
                // ISSUE: reference to a compiler-generated field
                if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__10 == null)
                {
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__10 = CallSite<Func<CallSite, object, object, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.BinaryOperationLogical, ExpressionType.And, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                  {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                  }));
                }
                // ISSUE: reference to a compiler-generated field
                Func<CallSite, object, object, object> target2 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__10.Target;
                // ISSUE: reference to a compiler-generated field
                CallSite<Func<CallSite, object, object, object>> p10 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__10;
                object obj5 = obj3;
                // ISSUE: reference to a compiler-generated field
                if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__9 == null)
                {
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__9 = CallSite<Func<CallSite, object, int, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                  {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
                  }));
                }
                // ISSUE: reference to a compiler-generated field
                Func<CallSite, object, int, object> target3 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__9.Target;
                // ISSUE: reference to a compiler-generated field
                CallSite<Func<CallSite, object, int, object>> p9 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__9;
                // ISSUE: reference to a compiler-generated field
                if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__8 == null)
                {
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__8 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Count", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
                  {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                  }));
                }
                // ISSUE: reference to a compiler-generated field
                Func<CallSite, object, object> target4 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__8.Target;
                // ISSUE: reference to a compiler-generated field
                CallSite<Func<CallSite, object, object>> p8 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__8;
                // ISSUE: reference to a compiler-generated field
                if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__7 == null)
                {
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__7 = CallSite<Func<CallSite, object, object>>.Create(Binder.GetMember(CSharpBinderFlags.None, "Properties", typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
                  {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                  }));
                }
                // ISSUE: reference to a compiler-generated field
                // ISSUE: reference to a compiler-generated field
                object obj6 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__7.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__7, obj1);
                object obj7 = target4((CallSite) p8, obj6);
                object obj8 = target3((CallSite) p9, obj7, 0);
                obj4 = target2((CallSite) p10, obj5, obj8);
              }
              else
                obj4 = obj3;
              if (target1((CallSite) p12, obj4))
              {
                // ISSUE: reference to a compiler-generated field
                if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__13 == null)
                {
                  // ISSUE: reference to a compiler-generated field
                  MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__13 = CallSite<Action<CallSite, ObservableCollection<DyDataGrid_MIBModel>, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "Add", (IEnumerable<System.Type>) null, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
                  {
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
                    CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
                  }));
                }
                // ISSUE: reference to a compiler-generated field
                // ISSUE: reference to a compiler-generated field
                MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__13.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__13, observableCollection, obj1);
                ++num1;
              }
            }
          }
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__15 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__15 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          Func<CallSite, object, bool> target5 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__15.Target;
          // ISSUE: reference to a compiler-generated field
          CallSite<Func<CallSite, object, bool>> p15 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__15;
          // ISSUE: reference to a compiler-generated field
          if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__14 == null)
          {
            // ISSUE: reference to a compiler-generated field
            MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__14 = CallSite<Func<CallSite, object, object, object>>.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, typeof (MainDataGrid), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.Constant, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          object obj9 = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__14.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__14, obj1, (object) null);
          if (target5((CallSite) p15, obj9))
          {
            // ISSUE: reference to a compiler-generated field
            if (MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__16 == null)
            {
              // ISSUE: reference to a compiler-generated field
              MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__16 = CallSite<Func<CallSite, object, DyDataGrid_MIBModel>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (DyDataGrid_MIBModel), typeof (MainDataGrid)));
            }
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            this.ColumnModel = MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__16.Target((CallSite) MainDataGrid.\u003C\u003Eo__107.\u003C\u003Ep__16, obj1);
            this.DynamicDataGrid.DataContext = (object) observableCollection;
          }
          if (this.IndexCount == 0)
          {
            this.DynamicDataGrid.Columns[1].CellEditTemplateSelector = (DataTemplateSelector) new MibMultiEditorsTemplateSelector();
          }
          else
          {
            int index = 0;
            foreach (GridColumn column in (Collection<GridColumn>) this.DynamicDataGrid.Columns)
            {
              if (index == 0)
              {
                ++index;
              }
              else
              {
                this.DynamicDataGrid.Columns[index].CellEditTemplateSelector = (DataTemplateSelector) new MibMultiEditorsTemplateSelector();
                ++index;
              }
            }
          }
          this.RefreshCompareModeCellTemplate();
        }
      }
      catch (Exception ex)
      {
        LogManager.Log.Error(ex.Message, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 4654, nameof (CompareModeRefreshDataGridPage));
      }
    }

    private void RefreshCompareModeCellTemplate()
    {
      try
      {
        if (this.DynamicDataGrid.DataContext == null)
          return;
        this.DynamicDataGrid.Resources.Clear();
        foreach (DyDataGrid_MIBModel dataGridMibModel in (Collection<DyDataGrid_MIBModel>) this.DynamicDataGrid.DataContext)
        {
          int num = 0;
          foreach (Tuple<string, string, object> property in dataGridMibModel.PropertyList)
          {
            if (!property.Item1.Equals(LanguageServices.Current.GetTextValue("CellPlan_Msg_NodeName")))
            {
              ++num;
              if (property.Item3 is LMT.GridCell)
              {
                LMT.GridCell gridCell = property.Item3 as LMT.GridCell;
                if (!gridCell.m_bIsReadOnly)
                {
                  if (gridCell.cellDataType == DataGrid_CellDataType.enumType)
                  {
                    FrameworkElementFactory frameworkElementFactory = new FrameworkElementFactory(typeof (ComboBoxEdit));
                    frameworkElementFactory.SetBinding(LookUpEditBase.ItemsSourceProperty, (BindingBase) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_AllContent"));
                    frameworkElementFactory.SetBinding(BaseEdit.EditValueProperty, (BindingBase) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_CurrentValue"));
                    frameworkElementFactory.SetValue(LookUpEditBase.ValueMemberProperty, (object) "Key");
                    frameworkElementFactory.SetValue(LookUpEditBase.DisplayMemberProperty, (object) "Value");
                    frameworkElementFactory.SetValue(ButtonEdit.IsTextEditableProperty, (object) false);
                    frameworkElementFactory.SetValue(System.Windows.Controls.Control.BorderBrushProperty, (object) Brushes.Transparent);
                    new DataTemplate().VisualTree = frameworkElementFactory;
                    DataTemplate dataTemplate1 = new DataTemplate();
                    dataTemplate1.VisualTree = frameworkElementFactory;
                    DataTemplate dataTemplate2 = dataTemplate1;
                    this.DynamicDataGrid.Resources.Add((object) ("Template" + gridCell.Id), (object) dataTemplate2);
                  }
                  else if (gridCell.cellDataType == DataGrid_CellDataType.bitType)
                  {
                    FrameworkElementFactory frameworkElementFactory = new FrameworkElementFactory(typeof (ComboBoxEdit));
                    frameworkElementFactory.SetValue(LookUpEditBase.ItemsSourceProperty, (object) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_AllBit"));
                    frameworkElementFactory.SetValue(LookUpEditBase.ValueMemberProperty, (object) "Value");
                    frameworkElementFactory.SetValue(LookUpEditBase.DisplayMemberProperty, (object) "Value");
                    frameworkElementFactory.SetBinding(BaseEdit.EditValueProperty, (BindingBase) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_Content")
                    {
                      Mode = BindingMode.TwoWay,
                      Converter = (IValueConverter) new StringToChecklistConverter()
                    });
                    frameworkElementFactory.SetValue(ButtonEdit.IsTextEditableProperty, (object) false);
                    frameworkElementFactory.SetValue(LookUpEditBase.SeparatorStringProperty, (object) "/");
                    Style style = new Style(typeof (ComboBoxEdit));
                    style.Setters.Add((SetterBase) new Setter(BaseEdit.StyleSettingsProperty, (object) new CheckedComboBoxStyleSettings()));
                    frameworkElementFactory.SetValue(FrameworkElement.StyleProperty, (object) style);
                    DataTemplate dataTemplate3 = new DataTemplate();
                    dataTemplate3.VisualTree = frameworkElementFactory;
                    DataTemplate dataTemplate4 = dataTemplate3;
                    this.DynamicDataGrid.Resources.Add((object) ("Template" + gridCell.Id), (object) dataTemplate4);
                  }
                  else if (gridCell.cellDataType == DataGrid_CellDataType.DateTime)
                  {
                    FrameworkElementFactory frameworkElementFactory = new FrameworkElementFactory(typeof (DateEdit));
                    frameworkElementFactory.SetBinding(BaseEdit.EditValueProperty, (BindingBase) new System.Windows.Data.Binding("RowData.Row." + property.Item1 + ".m_Content"));
                    frameworkElementFactory.SetValue(ButtonEdit.IsTextEditableProperty, (object) false);
                    Style style = new Style(typeof (DateEdit));
                    style.Setters.Add((SetterBase) new Setter(BaseEdit.StyleSettingsProperty, (object) new DateEditNavigatorWithTimePickerStyleSettings()));
                    frameworkElementFactory.SetValue(FrameworkElement.StyleProperty, (object) style);
                    frameworkElementFactory.SetValue(TextEdit.MaskProperty, (object) "yyyy-MM-dd HH:mm:ss");
                    frameworkElementFactory.SetValue(TextEdit.MaskUseAsDisplayFormatProperty, (object) true);
                    DataTemplate dataTemplate5 = new DataTemplate();
                    dataTemplate5.VisualTree = frameworkElementFactory;
                    DataTemplate dataTemplate6 = dataTemplate5;
                    this.DynamicDataGrid.Resources.Add((object) ("Template" + gridCell.Id), (object) dataTemplate6);
                  }
                }
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        LogManager.Log.Error(ex.Message, "d:\\code\\SCMT\\src\\scmt\\MainWindow\\View\\MainDataGrid.xaml.cs", 4745, nameof (RefreshCompareModeCellTemplate));
      }
    }

    private void OnQueryGroupOperations(object sender, QueryGroupOperationsEventArgs e) => e.AllowAddCustomExpression = false;

    private void BtnMakePatchFile_Click(object sender, RoutedEventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "cfg File(*.cfg)|*.cfg";
      saveFileDialog.AddExtension = true;
      saveFileDialog.DefaultExt = "pdg";
      if (saveFileDialog.ShowDialog() != DialogResult.OK || string.IsNullOrEmpty(saveFileDialog.FileName))
        return;
      CfgLogicMid.GetInstance().SavePdgFile(this.cfgUUID, saveFileDialog.FileName, out string _);
    }

    private void BtnCancelMutiQuery_Click(object sender, RoutedEventArgs e)
    {
      if (this.mutiQueryParaWin == null || !this.isMultiQuery)
        return;
      CancellationTokenSource cts = this.mutiQueryParaWin.viewParaSet.cts;
      if (cts == null || cts.IsCancellationRequested)
        return;
      cts.Cancel();
      this.BtnCancelMutiQuery.Visibility = Visibility.Collapsed;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      System.Windows.Application.LoadComponent((object) this, new Uri("/LMT;component/view/maindatagrid.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.DataGridMibName = (System.Windows.Controls.TextBox) target;
          break;
        case 2:
          this.DataGridMibEngName = (TextBlock) target;
          break;
        case 3:
          this.FullMibName = (TextBlock) target;
          break;
        case 4:
          this.DynamicDataGrid = (GridControl) target;
          this.DynamicDataGrid.Drop += new System.Windows.DragEventHandler(this.DynamicDataGrid_DragEnter);
          break;
        case 5:
          this.DynamicTableView = (TableView) target;
          break;
        case 8:
          this.popEnumList = (Popup) target;
          break;
        case 9:
          this.EnumList = (System.Windows.Controls.ListBox) target;
          break;
        case 10:
          this.PageInfo = (PagingControl) target;
          this.PageInfo.ChangePerPageNum += new RoutedEventHandler(this.tbkShowLineNum_LostFocus);
          this.PageInfo.TurningPage += new System.Windows.Input.KeyEventHandler(this.btnGo_Click);
          this.PageInfo.PreviousPage += new RoutedEventHandler(this.btnUp_Click);
          this.PageInfo.NextPage += new RoutedEventHandler(this.btnNext_Click);
          break;
        case 11:
          this.BtnShowModel = (System.Windows.Controls.Button) target;
          this.BtnShowModel.Click += new RoutedEventHandler(this.BtnShowModel_Click);
          break;
        case 12:
          this.BtnAllSel = (System.Windows.Controls.Button) target;
          this.BtnAllSel.Click += new RoutedEventHandler(this.BtnAllSel_Click);
          break;
        case 13:
          this.BtnCancelMutiQuery = (System.Windows.Controls.Button) target;
          this.BtnCancelMutiQuery.Click += new RoutedEventHandler(this.BtnCancelMutiQuery_Click);
          break;
        case 14:
          this.BtnSaveFile = (System.Windows.Controls.Button) target;
          this.BtnSaveFile.Click += new RoutedEventHandler(this.BtnSaveFile_Click);
          break;
        case 15:
          this.BtnMakePatchFile = (System.Windows.Controls.Button) target;
          this.BtnMakePatchFile.Click += new RoutedEventHandler(this.BtnMakePatchFile_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IStyleConnector.Connect(int connectionId, object target)
    {
      if (connectionId != 6)
      {
        if (connectionId != 7)
          return;
        ((Style) target).Setters.Add((SetterBase) new EventSetter()
        {
          Event = UIElement.MouseRightButtonDownEvent,
          Handler = (Delegate) new MouseButtonEventHandler(this.EditHeader)
        });
        ((Style) target).Setters.Add((SetterBase) new EventSetter()
        {
          Event = UIElement.PreviewMouseLeftButtonDownEvent,
          Handler = (Delegate) new MouseButtonEventHandler(this.IndexSort)
        });
      }
      else
        ((FilterEditorControl) target).QueryGroupOperations += new EventHandler<QueryGroupOperationsEventArgs>(this.OnQueryGroupOperations);
    }
  }
}
