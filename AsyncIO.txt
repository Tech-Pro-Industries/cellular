using AsyncIO.DotNet;
using System;
using System.Net;
using System.Net.Sockets;

namespace AsyncIO
{
  public abstract class AsyncSocket : IDisposable
  {
    private SocketOptionName IPv6Only = SocketOptionName.IPv6Only;

    internal AsyncSocket(
      AddressFamily addressFamily,
      SocketType socketType,
      ProtocolType protocolType)
    {
      this.AddressFamily = addressFamily;
      this.SocketType = socketType;
      this.ProtocolType = protocolType;
    }

    public static AsyncSocket Create(
      AddressFamily addressFamily,
      SocketType socketType,
      ProtocolType protocolType)
    {
      return Environment.OSVersion.Platform != PlatformID.Win32NT || ForceDotNet.Forced ? (AsyncSocket) new NativeSocket(addressFamily, socketType, protocolType) : (AsyncSocket) new AsyncIO.Windows.Socket(addressFamily, socketType, protocolType);
    }

    public static AsyncSocket CreateIPv4Tcp() => AsyncSocket.Create(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

    public static AsyncSocket CreateIPv6Tcp() => AsyncSocket.Create(AddressFamily.InterNetworkV6, SocketType.Stream, ProtocolType.Tcp);

    public AddressFamily AddressFamily { get; private set; }

    public SocketType SocketType { get; private set; }

    public ProtocolType ProtocolType { get; private set; }

    public abstract IPEndPoint LocalEndPoint { get; }

    public abstract IPEndPoint RemoteEndPoint { get; }

    public bool NoDelay
    {
      get => (int) this.GetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.Debug) != 0;
      set => this.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.Debug, value ? 1 : 0);
    }

    public bool ExclusiveAddressUse
    {
      get => (int) this.GetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ExclusiveAddressUse) != 0;
      set => this.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ExclusiveAddressUse, value ? 1 : 0);
    }

    public bool DualMode
    {
      get
      {
        if (this.AddressFamily != AddressFamily.InterNetworkV6)
          throw new NotSupportedException("invalid version");
        return (int) this.GetSocketOption(SocketOptionLevel.IPv6, this.IPv6Only) == 0;
      }
      set
      {
        if (this.AddressFamily != AddressFamily.InterNetworkV6)
          throw new NotSupportedException("invalid version");
        this.SetSocketOption(SocketOptionLevel.IPv6, this.IPv6Only, value ? 0 : 1);
      }
    }

    public int ReceiveBufferSize
    {
      get => (int) this.GetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveBuffer);
      set
      {
        if (value < 0)
          throw new ArgumentOutOfRangeException(nameof (value));
        this.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveBuffer, value);
      }
    }

    public int SendBufferSize
    {
      get => (int) this.GetSocketOption(SocketOptionLevel.Socket, SocketOptionName.SendBuffer);
      set
      {
        if (value < 0)
          throw new ArgumentOutOfRangeException(nameof (value));
        this.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.SendBuffer, value);
      }
    }

    public LingerOption LingerState
    {
      get => (LingerOption) this.GetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Linger);
      set => this.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Linger, (object) value);
    }

    public bool EnableBroadcast
    {
      get => (int) this.GetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Broadcast) != 0;
      set => this.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Broadcast, value ? 1 : 0);
    }

    public bool MulticastLoopback
    {
      get
      {
        if (this.AddressFamily == AddressFamily.InterNetwork)
          return (int) this.GetSocketOption(SocketOptionLevel.IP, SocketOptionName.MulticastLoopback) != 0;
        if (this.AddressFamily != AddressFamily.InterNetworkV6)
          throw new NotSupportedException("invalid version");
        return (int) this.GetSocketOption(SocketOptionLevel.IPv6, SocketOptionName.MulticastLoopback) != 0;
      }
      set
      {
        if (this.AddressFamily == AddressFamily.InterNetwork)
        {
          this.SetSocketOption(SocketOptionLevel.IP, SocketOptionName.MulticastLoopback, value ? 1 : 0);
        }
        else
        {
          if (this.AddressFamily != AddressFamily.InterNetworkV6)
            throw new NotSupportedException("invalid version");
          this.SetSocketOption(SocketOptionLevel.IPv6, SocketOptionName.MulticastLoopback, value ? 1 : 0);
        }
      }
    }

    public short Ttl
    {
      get
      {
        if (this.AddressFamily == AddressFamily.InterNetwork)
          return (short) (int) this.GetSocketOption(SocketOptionLevel.IP, SocketOptionName.ReuseAddress);
        if (this.AddressFamily == AddressFamily.InterNetworkV6)
          return (short) (int) this.GetSocketOption(SocketOptionLevel.IPv6, SocketOptionName.ReuseAddress);
        throw new NotSupportedException("invalid version");
      }
      set
      {
        if (value < (short) 0 || value > (short) byte.MaxValue)
          throw new ArgumentOutOfRangeException(nameof (value));
        if (this.AddressFamily == AddressFamily.InterNetwork)
        {
          this.SetSocketOption(SocketOptionLevel.IP, SocketOptionName.ReuseAddress, (int) value);
        }
        else
        {
          if (this.AddressFamily != AddressFamily.InterNetworkV6)
            throw new NotSupportedException("invalid version");
          this.SetSocketOption(SocketOptionLevel.IPv6, SocketOptionName.ReuseAddress, (int) value);
        }
      }
    }

    public abstract void SetSocketOption(
      SocketOptionLevel optionLevel,
      SocketOptionName optionName,
      bool optionValue);

    public abstract void SetSocketOption(
      SocketOptionLevel optionLevel,
      SocketOptionName optionName,
      byte[] optionValue);

    public abstract void SetSocketOption(
      SocketOptionLevel optionLevel,
      SocketOptionName optionName,
      object optionValue);

    public abstract void SetSocketOption(
      SocketOptionLevel optionLevel,
      SocketOptionName optionName,
      int optionValue);

    public abstract object GetSocketOption(
      SocketOptionLevel optionLevel,
      SocketOptionName optionName);

    public abstract void GetSocketOption(
      SocketOptionLevel optionLevel,
      SocketOptionName optionName,
      byte[] optionValue);

    public abstract byte[] GetSocketOption(
      SocketOptionLevel optionLevel,
      SocketOptionName optionName,
      int optionLength);

    public abstract int IOControl(
      IOControlCode ioControlCode,
      byte[] optionInValue,
      byte[] optionOutValue);

    public abstract void Dispose();

    public abstract void Bind(IPEndPoint localEndPoint);

    public abstract void Listen(int backlog);

    public abstract void Connect(IPEndPoint endPoint);

    [Obsolete("Use Accept without parameter and GetAcceptedSocket")]
    public abstract void Accept(AsyncSocket socket);

    public abstract void Accept();

    public abstract AsyncSocket GetAcceptedSocket();

    public abstract void Send(byte[] buffer, int offset, int count, SocketFlags flags);

    public abstract void Receive(byte[] buffer, int offset, int count, SocketFlags flags);
  }
}
